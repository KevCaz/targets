[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The {targets} R package user manual",
    "section": "",
    "text": "1 Introduction\nPipeline tools coordinate the pieces of computationally demanding analysis projects. The targets package is a Make-like pipeline tool for statistics and data science in R. The package skips costly runtime for tasks that are already up to date, orchestrates the necessary computation with implicit parallel computing, and abstracts files as R objects. If all the current output matches the current upstream code and data, then the whole pipeline is up to date, and the results are more trustworthy than otherwise."
  },
  {
    "objectID": "index.html#motivation",
    "href": "index.html#motivation",
    "title": "The {targets} R package user manual",
    "section": "1.1 Motivation",
    "text": "1.1 Motivation\nData analysis can be slow. A round of scientific computation can take several minutes, hours, or even days to complete. After it finishes, if you update your code or data, your hard-earned results may no longer be valid. Unchecked, this invalidation creates chronic Sisyphean loop:\n\nLaunch the code.\nWait while it runs.\nDiscover an issue.\nRestart from scratch."
  },
  {
    "objectID": "index.html#pipeline-tools",
    "href": "index.html#pipeline-tools",
    "title": "The {targets} R package user manual",
    "section": "1.2 Pipeline tools",
    "text": "1.2 Pipeline tools\nPipeline tools like GNU Make break the cycle. They watch the dependency graph of the whole workflow and skip steps, or “targets”, whose code, data, and upstream dependencies have not changed since the last run of the pipeline. When all targets are up to date, this is evidence that the results match the underlying code and data, which helps us trust the results and confirm the computation is reproducible."
  },
  {
    "objectID": "index.html#the-targets-package",
    "href": "index.html#the-targets-package",
    "title": "The {targets} R package user manual",
    "section": "1.3 The targets package",
    "text": "1.3 The targets package\nUnlike most pipeline tools, which are language agnostic or Python-focused, the targets package allows data scientists and researchers to work entirely within R. targets implicitly nudges users toward a clean, function-oriented programming style that fits the intent of the R language and helps practitioners maintain their data analysis projects."
  },
  {
    "objectID": "index.html#about-this-manual",
    "href": "index.html#about-this-manual",
    "title": "The {targets} R package user manual",
    "section": "1.4 About this manual",
    "text": "1.4 About this manual\nThis manual is a step-by-step user guide to targets. The most important chapters are the walkthrough, help guide, and debugging guide. Subsequent chapters explain how to write code, manage projects, utilize high-performance computing, transition from drake, and more. See the documentation website for most other major resources, including installation instructions, links to example projects, and a reference page with all user-side functions."
  },
  {
    "objectID": "index.html#what-about-drake",
    "href": "index.html#what-about-drake",
    "title": "The {targets} R package user manual",
    "section": "1.5 What about drake?",
    "text": "1.5 What about drake?\nThe drake is an older R-focused pipeline tool, and targets is drake’s long-term successor. There is a special chapter to explain why targets was created, what this means for drake’s future, advice for drake users transitioning to targets, and the main technical advantages of targets over drake."
  },
  {
    "objectID": "walkthrough.html#about-this-example",
    "href": "walkthrough.html#about-this-example",
    "title": "2  A walkthrough to get started",
    "section": "2.1 About this example",
    "text": "2.1 About this example\nThe goal of this short analysis is to assess the relationship among ozone and temperature in base R’s airquality dataset. We track a data file, prepare a dataset, fit a model, and plot the model against the data."
  },
  {
    "objectID": "walkthrough.html#file-structure",
    "href": "walkthrough.html#file-structure",
    "title": "2  A walkthrough to get started",
    "section": "2.2 File structure",
    "text": "2.2 File structure\nThe file structure of the project looks like this.\n\n├── _targets.R\n├── data.csv\n├── R/\n│   ├── functions.R\n\ndata.csv contains the data we want to analyze.\nOzone,Solar.R,Wind,Temp,Month,Day\n36,118,8.0,72,5,2\n12,149,12.6,74,5,3\n...\nR/functions.R contains our custom user-defined functions. (See the functions chapter for a discussion of function-oriented workflows.)\n\n# R/functions.R\nget_data &lt;- function(file) {\n  read_csv(file, col_types = cols()) %&gt;%\n    filter(!is.na(Ozone))\n}\n\nfit_model &lt;- function(data) {\n  lm(Ozone ~ Temp, data) %&gt;%\n    coefficients()\n}\n\nplot_model &lt;- function(model, data) {\n  ggplot(data) +\n    geom_point(aes(x = Temp, y = Ozone)) +\n    geom_abline(intercept = model[1], slope = model[2])\n}"
  },
  {
    "objectID": "walkthrough.html#target-script-file",
    "href": "walkthrough.html#target-script-file",
    "title": "2  A walkthrough to get started",
    "section": "2.3 Target script file",
    "text": "2.3 Target script file\nWhereas files data.csv and functions.R are typical user-defined components of a project-oriented workflow, the target script file _targets.R file is special. Every targets workflow needs a target script file to configure and define the pipeline.1 The use_targets() function in targets version &gt;= 0.12.0 creates an initial target script with comments to help you fill it in. Ours looks like this:\n\n# _targets.R file\nlibrary(targets)\nsource(\"R/functions.R\")\ntar_option_set(packages = c(\"readr\", \"dplyr\", \"ggplot2\"))\nlist(\n  tar_target(file, \"data.csv\", format = \"file\"),\n  tar_target(data, get_data(file)),\n  tar_target(model, fit_model(data)),\n  tar_target(plot, plot_model(model, data))\n)\n\nAll target script files have these requirements.\n\nLoad the packages needed to define the pipeline, e.g. targets itself.2\nUse tar_option_set() to declare the packages that the targets themselves need, as well as other settings such as the default storage format.\nLoad your custom functions and small input objects into the R session: in our case, with source(\"R/functions.R\").\nWrite the pipeline at the bottom of _targets.R. A pipeline is a list of target objects, which you can create with tar_target(). Each target is a step of the analysis. It looks and feels like a variable in R, but during tar_make(), it will reproducibly store a value in _targets/objects/.\n\n\n\n\n\n\n\nStart small\n\n\n\nEven if you plan to create a large-scale heavy-duty pipeline with hundreds of time-consuming targets, it is best to start small. First create a version of the pipeline with a small number of quick-to-run targets, follow the sections below to inspect and test it, and then scale up to the full-sized pipeline after you are sure everything is working."
  },
  {
    "objectID": "walkthrough.html#inspect-the-pipeline",
    "href": "walkthrough.html#inspect-the-pipeline",
    "title": "2  A walkthrough to get started",
    "section": "2.4 Inspect the pipeline",
    "text": "2.4 Inspect the pipeline\nBefore you run the pipeline for real, it is best to check for obvious errors. tar_manifest() lists verbose information about each target.\n\ntar_manifest(fields = all_of(\"command\"))\n#&gt; # A tibble: 4 × 2\n#&gt;   name  command                  \n#&gt;   &lt;chr&gt; &lt;chr&gt;                    \n#&gt; 1 file  \"\\\"data.csv\\\"\"           \n#&gt; 2 data  \"get_data(file)\"         \n#&gt; 3 model \"fit_model(data)\"        \n#&gt; 4 plot  \"plot_model(model, data)\"\n\ntar_visnetwork() displays the dependency graph of the pipeline, showing a natural left-to-right flow of work. It is good practice to make sure the graph has the correct nodes connected with the correct edges. Read more about dependencies and the graph in the dependencies section of a later chapter.\n\ntar_visnetwork()"
  },
  {
    "objectID": "walkthrough.html#run-the-pipeline",
    "href": "walkthrough.html#run-the-pipeline",
    "title": "2  A walkthrough to get started",
    "section": "2.5 Run the pipeline",
    "text": "2.5 Run the pipeline\ntar_make() runs the pipeline. It creates a reproducible new external R process which then reads the target script and runs the correct targets in the correct order.3\n\ntar_make()\n#&gt; ▶ start target file\n#&gt; ● built target file [0.281 seconds]\n#&gt; ▶ start target data\n#&gt; ● built target data [0.148 seconds]\n#&gt; ▶ start target model\n#&gt; ● built target model [0.004 seconds]\n#&gt; ▶ start target plot\n#&gt; ● built target plot [0.015 seconds]\n#&gt; ▶ end pipeline [0.568 seconds]\n\nThe output of the pipeline is saved to the _targets/ data store, and you can read the output with tar_read() (see also tar_load()).\n\ntar_read(plot)\n\n\n\n\nThe next time you run tar_make(), targets skips everything that is already up to date, which saves a lot of time in large projects with long runtimes.\n\ntar_make()\n#&gt; ✔ skip target file\n#&gt; ✔ skip target data\n#&gt; ✔ skip target model\n#&gt; ✔ skip target plot\n#&gt; ✔ skip pipeline [0.078 seconds]\n\nYou can use tar_visnetwork() and tar_outdated() to check ahead of time which targets are up to date.\n\ntar_visnetwork()\n\n\n\n\n\n\ntar_outdated()\n#&gt; character(0)"
  },
  {
    "objectID": "walkthrough.html#changes",
    "href": "walkthrough.html#changes",
    "title": "2  A walkthrough to get started",
    "section": "2.6 Changes",
    "text": "2.6 Changes\nThe targets package notices when you make changes to code and data, and those changes affect which targets rerun and which targets are skipped.4\n\n2.6.1 Change code\nIf you change one of your functions, the targets that depend on it will no longer be up to date, and tar_make() will rebuild them. For example, let’s increase the font size of the plot.\n\n# Edit functions.R...\nplot_model &lt;- function(model, data) {\n  ggplot(data) +\n    geom_point(aes(x = Temp, y = Ozone)) +\n    geom_abline(intercept = model[1], slope = model[2]) +\n    theme_gray(24) # Increased the font size.\n}\n\ntargets detects the change. plot is “outdated” (i.e. invalidated) and the others are still up to date.\n\ntar_visnetwork()\n\n\n\n\n\n\ntar_outdated()\n#&gt; [1] \"plot\"\n\nThus, tar_make() reruns plot and nothing else.5\n\ntar_make()\n#&gt; ✔ skip target file\n#&gt; ✔ skip target data\n#&gt; ✔ skip target model\n#&gt; ▶ start target plot\n#&gt; ● built target plot [0.017 seconds]\n#&gt; ▶ end pipeline [0.392 seconds]\n\nSure enough, we have a new plot.\n\ntar_read(plot)\n\n\n\n\n\n\n2.6.2 Change data\nIf we change the data file data.csv, targets notices the change. This is because file is a file target (i.e. with format = \"file\" in tar_target()), and the return value from last tar_make() identified \"data.csv\" as the file to be tracked for changes. Let’s try it out. Below, let’s use only the first 100 rows of the airquality dataset.\n\nwrite_csv(head(airquality, n = 100), \"data.csv\")\n\nSure enough, raw_data_file and everything downstream is out of date, so all our targets are outdated.\n\ntar_visnetwork()\n\n\n\n\n\n\ntar_outdated()\n#&gt; [1] \"file\"  \"plot\"  \"data\"  \"model\"\n\n\ntar_make()\n#&gt; ▶ start target file\n#&gt; ● built target file [0.252 seconds]\n#&gt; ▶ start target data\n#&gt; ● built target data [0.146 seconds]\n#&gt; ▶ start target model\n#&gt; ● built target model [0.003 seconds]\n#&gt; ▶ start target plot\n#&gt; ● built target plot [0.017 seconds]\n#&gt; ▶ end pipeline [0.54 seconds]"
  },
  {
    "objectID": "walkthrough.html#read-metadata",
    "href": "walkthrough.html#read-metadata",
    "title": "2  A walkthrough to get started",
    "section": "2.7 Read metadata",
    "text": "2.7 Read metadata\n\n\n\n\n\n\nPerformance\n\n\n\nSee the performance chapter for options, settings, and other choices to make the pipeline more efficient. This chapter also has guidance for monitoring the progress of a running pipeline."
  },
  {
    "objectID": "walkthrough.html#footnotes",
    "href": "walkthrough.html#footnotes",
    "title": "2  A walkthrough to get started",
    "section": "",
    "text": "By default, the target script is a file called _targets.R in the project’s root directory. However, you can set the target script file path to something other than _targets.R. You can either set the path persistently for your project using tar_config_set(), or you can set it temporarily for an individual function call using the script argument of tar_make() and related functions.↩︎\ntarget scripts created with tar_script() automatically insert a library(targets) line at the top by default.↩︎\nIn targets version 0.3.1.9000 and above, you can set the path of the local data store to something other than _targets/. A project-level _targets.yaml file keeps track of the path. Functions tar_config_set() and tar_config_get() can help.↩︎\nInternally, special rules called “cues” decide whether a target reruns. The tar_cue() function lets you suppress some of these cues, and the tarchetypes package supports nuanced cue factories and target factories to further customize target invalidation behavior. The tar_cue() function documentation explains cues in detail, as well as specifics on how targets detects changes to upstream dependencies.↩︎\nWe would see similar behavior if we changed the R expressions in any tar_target() calls in the target script file.↩︎"
  },
  {
    "objectID": "help.html#before-you-post",
    "href": "help.html#before-you-post",
    "title": "3  Help",
    "section": "3.1 Before you post",
    "text": "3.1 Before you post\n\n3.1.1 Code of conduct\nAll developers, users, and other discussants must follow the code of conduct. Please read it before engaging in discussion.\n\n\n3.1.2 Sensitive information\nThe discussion forums from Section 3.3 are open to the public, and anyone with an internet connection can read them. Please do not share any company confidential information, personally identifiable information, private research data, or any other sensitive information.\n\n\n3.1.3 Search existing posts\nPlease check if your question already has an answer. Section 3.3 links to searchable online discussion forums with thousands of existing posts. If a relevant thread already exists, please read it first. Then if necessary, please comment there instead of starting a new post.\n\n\n3.1.4 Try troubleshooting\nFor specific errors or other issues, please read this chapter’s section on troubleshooting. Please try to work through the steps yourself before posting a question."
  },
  {
    "objectID": "help.html#troubleshooting",
    "href": "help.html#troubleshooting",
    "title": "3  Help",
    "section": "3.2 Troubleshooting",
    "text": "3.2 Troubleshooting\nIt is okay to reach out if you are struggling to solve a specific problem in a specific project: an error message, a part of the code you are not sure how to write, or any experience with targets that is incorrect, unwelcome, unexpected, or confusing. However, please follow the guidelines below and take an active role in the troubleshooting process.\n\n3.2.1 Update your R packages\nIf the error is a bug in targets or tarchetypes, it is possible the bug has already been fixed in a newer version. Before posting, please try again with the latest CRAN release of targets (or tarchetypes), then again with the GitHub development version if needed. Please see https://docs.ropensci.org/targets/#installation for installation instructions.\n\n\n3.2.2 Attribute the error\nThe targets package itself is not usually the cause of problems that arise in targets pipelines. Most issues come from the user-defined R code, R commands, and R functions that the pipeline calls, as well as other R packages on your system. It is often easiest to diagnose these problems by removing your code from the pipeline and running it without using targets at all. So before you post a question, please attempt to troubleshoot and figure out if targets is actually the source of the trouble, or if the error comes from another package or your own code. The tips in the debugging chapter may help. If the culprit turns out to be a non-targets issue, then please ask your question in a non-targets forum and write the question accordingly.\n\n\n3.2.3 Set expectations\nComputer code is extremely strict. In order to run properly, it needs to be exactly correct, down to the last detail. That makes every single piece of every single computer program susceptible to programming errors and usage errors. For every bug you discover, there are hundreds of strange and unguessable potential causes. The culprit could be a typo buried deep in the targets codebase, an incorrect hidden assumption lost in translation about how to use targets, an obscure bug in an obscure R package dependency, a mistake in one of your R functions, or some other mysterious or unexpected reason. In addition, you may be the first user to experience the problem. So when you ask for help, it is not enough to state the error and ask what might be the solution. The true answer is too surprising to predict, even for the most experienced experts of R and targets.\n\n\n3.2.4 Write a reprex\nTo set up the discussion for success, please provide the complete context of the problem, including a reprex. The purpose of a reprex, or reproducible example1, is to eliminate the knowledge gaps, misunderstandings, and hidden assumptions where bugs hide. A reprex is a sample of complete, self-contained, runnable code that fully emulates and reproduces the problem. The code should look clean and readable, be as short and concise as possible, run in as few seconds as possible, and contain only the details most relevant to troubleshooting. You can embed the code inline in your question, or you can upload it to a public repository and post the link. Regardless, please expect that anyone trying to help will read all the code and run the enclosed _targets.R file on their own private computer. This process is hands-on and empirical, so please make it as quick and easy as possible for the people who volunteer their valuable time and energy to answer questions.\nThe following posts explain how to write a good reprex.\n\nhttps://stackoverflow.com/help/minimal-reproducible-example\nhttps://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example\nhttps://reprex.tidyverse.org/\nhttps://www.tidyverse.org/blog/2017/12/workflow-vs-script/\n\nThe discussion forums of targets and tarchetypes have excellent reprexes from users.\n\nhttps://github.com/ropensci/tarchetypes/discussions/90\nhttps://github.com/ropensci/tarchetypes/discussions/102\nhttps://github.com/ropensci/tarchetypes/discussions/126\nhttps://github.com/ropensci/tarchetypes/discussions/129\nhttps://github.com/ropensci/targets/discussions/884\nhttps://github.com/ropensci/targets/discussions/953#discussioncomment-3842883\nhttps://github.com/ropensci/targets/discussions/944\nhttps://github.com/ropensci/targets/discussions/945\nhttps://github.com/ropensci/targets/discussions/954"
  },
  {
    "objectID": "help.html#sec-contact",
    "href": "help.html#sec-contact",
    "title": "3  Help",
    "section": "3.3 Contact",
    "text": "3.3 Contact\nThere are many ways to reach out.\n\n3.3.1 Community\nYou can reach out to the R community at these public forums.\n\nStack Overflow\nPosit Community\nrOpenSci Discuss\nMastodon (#rstats hashtag)\nR subreddit\n\n\n\n3.3.2 Maintainer\nTo contact the maintainer directly, please post to the relevant public GitHub Discussions page of the package.2 Examples:\n\ntargets: https://github.com/ropensci/targets/discussions\ntarchetypes: https://github.com/ropensci/tarchetypes/discussions\ngittargets: https://github.com/ropensci/gittargets/discussions\njagstargets: https://github.com/ropensci/jagstargets/discussions\nstantargets: https://github.com/ropensci/stantargets/discussions\n\nGitHub makes it easy to search for and link to public discussions. Not only does this help users solve their own problems, it also helps the maintainer avoid repetition. So please use discussions instead of private emails, instant messages, or mentions on social media.\n\n3.3.2.1 Out of office\nWhen the maintainer is out of office, the GitHub repositories above will enter vacation mode. During these times, Github interactions are temporarily limited, which means users cannot open or comment on issues or discussions. Each repository has an issue like this one to show when vacation mode is turned on and when the maintainer will return and re-enable interactions.3"
  },
  {
    "objectID": "help.html#footnotes",
    "href": "help.html#footnotes",
    "title": "3  Help",
    "section": "",
    "text": "Also known as a minimal reproducible example or minimal working example.↩︎\nYou may need to create a free GitHub account, but the process is straightforward.↩︎\nI automate these interaction settings and issues using R functions vacation_on() and vacation_off() from https://github.com/wlandau/dotfiles/blob/main/github/vacation.R.↩︎"
  },
  {
    "objectID": "debugging.html#debugging-in-targets-is-different",
    "href": "debugging.html#debugging-in-targets-is-different",
    "title": "4  Debugging",
    "section": "4.1 Debugging in targets is different",
    "text": "4.1 Debugging in targets is different\nR code is easiest to debug when it is interactive. In the R console or RStudio IDE, you have full control over the code and the objects in the environment, and you are free to dissect, tinker, and test until you find and fix the issue. However, a pipeline is the opposite of interactive. In targets, several layers of encapsulation and automation separate you from the code you want to debug:\n\nThe pipeline runs in an external non-interactive callr::r() process where you cannot use the R console.\nData management\nEnvironment management\nHigh-performance computing\nBuilt-in error handling\n\nAlthough these layers are essential for reproducibility and scale, you will need to cut through them in order to diagnose and solve issues in pipelines. This chapter explains how."
  },
  {
    "objectID": "debugging.html#example",
    "href": "debugging.html#example",
    "title": "4  Debugging",
    "section": "4.2 Example",
    "text": "4.2 Example\nThe following pipeline simulates a repeated measures dataset and analyzes it with generalized least squares.\n\n# _targets.R\nlibrary(targets)\ntar_option_set(\n  packages = c(\"broom\", \"broom.mixed\", \"dplyr\", \"nlme\", \"tibble\", \"tidyr\")\n)\n\nsimulate_data &lt;- function(units) {\n  tibble(unit = seq_len(units), factor = rnorm(n = units, mean = 3)) %&gt;%\n    expand_grid(measurement = seq_len(4)) %&gt;%\n    mutate(outcome = sqrt(factor) + rnorm(n()))\n}\n\nanalyze_data &lt;- function(data) {\n  gls(\n    model = outcome ~ factor,\n    data = data,\n    correlation = corSymm(form = ~ measurement | unit),\n    weights = varIdent(form = ~ 1 | measurement)\n  ) %&gt;%\n    tidy(conf.int = TRUE, conf.level = 0.95)\n}\n\nlist(\n  tar_target(name = dataset1, command = simulate_data(100)),\n  tar_target(name = model, command = analyze_data(dataset1))\n)\n\nThis pipeline has an error.\n\n# R console\ntar_make()\n#&gt; • start target dataset1\n#&gt; • built target dataset1 [0.499 seconds]\n#&gt; • start target model\n#&gt; ✖ error target model\n#&gt; • end pipeline [0.631 seconds]\n#&gt; Warning messages:\n#&gt; 1: NaNs produced \n#&gt; 2: 1 targets produced warnings. Run tar_meta(fields = warnings, complete_only = TRUE) for the messages. \n#&gt; Error:\n#&gt; ! Error running targets::tar_make()\n#&gt;   Target errors: targets::tar_meta(fields = error, complete_only = TRUE)\n#&gt;   Tips: https://books.ropensci.org/targets/debugging.html\n#&gt;   Last error: missing values in object"
  },
  {
    "objectID": "debugging.html#finish-the-pipeline-anyway",
    "href": "debugging.html#finish-the-pipeline-anyway",
    "title": "4  Debugging",
    "section": "4.3 Finish the pipeline anyway",
    "text": "4.3 Finish the pipeline anyway\nEven if you hit an error, you can still finish the successful parts of the pipeline. The error argument of tar_option_set() and tar_target() tells each target what to do if it hits an error. For example, tar_option_set(error = \"null\") tells errored targets to return NULL. The output as a whole will not be correct or up to date, but the pipeline will finish so you can look at preliminary results. This is especially helpful with dynamic branching.\n\n# _targets.R\nlibrary(targets)\ntar_option_set(\n  packages = c(\"broom\", \"broom.mixed\", \"dplyr\", \"nlme\", \"tibble\", \"tidyr\"),\n  error = \"null\" # produce a result even if the target errored out.\n)\n\n# Functions etc...\n\n\n# R console\ntar_make()\n#&gt; • start target dataset1\n#&gt; • built target dataset1 [0.657 seconds]\n#&gt; • start target model\n#&gt; ✖ error target model\n#&gt; ✖ error target model\n#&gt; • end pipeline [0.783 seconds]\n#&gt; Warning messages:\n#&gt; 1: NaNs produced \n#&gt; 2: 1 targets produced warnings. Run tar_meta(fields = warnings, complete_only = TRUE) for the messages.\n\n# We do have a result for target {model}.\ntar_read(model)\n#&gt; NULL\n\n# But it is not up to date.\ntar_outdated()\n#&gt; [1] \"model\""
  },
  {
    "objectID": "debugging.html#error-messages",
    "href": "debugging.html#error-messages",
    "title": "4  Debugging",
    "section": "4.4 Error messages",
    "text": "4.4 Error messages\nStill, it is important to fix known errors. The metadata in _targets/meta/meta is a good place to start. It stores the most recent error and warning messages for each target. tar_meta() can retrieve these messages.\n\n# R console\ntar_meta(fields = error, complete_only = TRUE)\n#&gt; # A tibble: 1 × 2\n#&gt;   name  error                   \n#&gt;   &lt;chr&gt; &lt;chr&gt;                   \n#&gt; 1 model missing values in object\n\n\n# R console\ntar_meta(fields = warnings, complete_only = TRUE)\n#&gt; # A tibble: 1 × 2\n#&gt;   name     warnings     \n#&gt;   &lt;chr&gt;    &lt;chr&gt;        \n#&gt; 1 dataset1 NaNs produced\n\nIt looks like missing values in the data are responsible for the error in the model target. Maybe this clue alone is enough to repair the code.1 If not, read on."
  },
  {
    "objectID": "debugging.html#functions",
    "href": "debugging.html#functions",
    "title": "4  Debugging",
    "section": "4.5 Functions",
    "text": "4.5 Functions\nMost errors are come from custom user-defined functions like simulate_data() and analyze_data(). See if you can reproduce the error in the R console.\n\n# R console\nlibrary(targets)\n\n# Restart your R session.\nrstudioapi::restartSession()\n\n# Loads globals like tar_option_set() packages, simulate_data(), and analyze_data():\ntar_load_globals()\n\n# Load the data that the target depends on.\ntar_load(dataset1)\n\n# Run the command of the errored target.\nanalyze_data(dataset1)\n#&gt; Error in na.fail.default(list(measurement = c(1L, 2L, 3L, 4L, 1L, 2L,  : \n#&gt;   missing values in object\n\nIf you see the same error here that you saw in the pipeline, then good! Now that you are in an interactive R session, all the usual debugging techniques and tools such as debug() and browser() can help you figure out how to fix your code, and you can exclude targets from the rest of the debugging process.\n\n# R console\ndebug(analyze_data)\nanalyze_data(dataset1)\n#&gt; debugging in: analyze_data(dataset)\n#&gt; ...\nBrowse[2]&gt; anyNA(dataset$outcome) # Do I need to handle missing values?\n#&gt; [1] TRUE\n\nIn some cases, however, you may not see the original error:\n\n# R console\ndataset &lt;- simulate_data(100)\nanalyze_data(dataset)\n#&gt; # A tibble: 2 × 7\n#&gt;   term        estimate std.error statistic  p.value conf.low conf.high\n#&gt; * &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1 (Intercept)    0.595    0.152       3.92 1.05e- 4    0.297     0.892\n#&gt; 2 factor         0.362    0.0476      7.61 2.04e-13    0.269     0.455\n\nAbove, the random number generator seed in your local session is different from the seed assigned to the target in the pipeline. The dataset from the pipeline has missing values, whereas the one in the local session does not.\nIf you cannot reproduce the error in an interactive R session, read on."
  },
  {
    "objectID": "debugging.html#system-issues",
    "href": "debugging.html#system-issues",
    "title": "4  Debugging",
    "section": "4.6 System issues",
    "text": "4.6 System issues\nIf you see an error in the pipeline but not your local interactive R session, then the bug could be system-related. For example, this issue was originally reported as a bug in targets but actually turned out to be a bug in the interaction between packages renv and callr. (Remember, targets runs the pipeline in a callr::r() process.) To check for issues like that one, try running tar_make() with callr_function = NULL to avoid callr entirely:\n\n# R console\nrstudioapi::restartSession() # Remove in-memory detritus.\ntargets::tar_make(callr_function = NULL)\n\nIn addition, try running your code with callr outside the pipeline:\n\n# R console\ncallr::r(\n  func = function() {\n    library(targets)\n    tar_load_globals()\n    dataset &lt;- simulate_data(100)\n    analyze_data(dataset)\n  },\n  show = TRUE\n)\n\nSimilarly, you can isolate many high-performance computing problems by directly invoking clustermq or future. Examples:\n\n# R console with clustermq:\n# see https://mschubert.github.io/clustermq/articles/userguide.html\noptions(clustermq.scheduler = \"multiprocess\")\nclustermq::Q(\n  function(arg) {\n    library(targets)\n    tar_load_globals()\n    dataset &lt;- simulate_data(100)\n    analyze_data(dataset)\n  },\n  arg = 1,\n  n_jobs = 1\n)\n\n\n# R console with future:\n# see https://future.futureverse.org\nfuture::plan(future::multisession)\nf &lt;- future::future(\n  expr = {\n    library(targets)\n    tar_load_globals()\n    dataset &lt;- simulate_data(100)\n    analyze_data(dataset)\n  },\n  seed = TRUE\n)\nfuture::value(f)\n\nIf you successfully reproduce the bug without using targets, then the problem becomes much smaller and much easier to solve. At that point, you can completely exclude targets from the rest of the debugging process."
  },
  {
    "objectID": "debugging.html#pause-the-pipeline-with-browser",
    "href": "debugging.html#pause-the-pipeline-with-browser",
    "title": "4  Debugging",
    "section": "4.7 Pause the pipeline with browser()",
    "text": "4.7 Pause the pipeline with browser()\nSometimes, you may still need to run the pipeline to find the problem. The following trick lets you pause the pipeline and tinker with a running target interactively:\n\nInsert browser() into the function that produces the error.\nRestart your R session to remove detritus from memory.2\nCall tar_make() with callr_function = NULL to run the pipeline in your interactive session without launching a new callr::r() process.\nPoke around until you find the bug.\n\n\n# _targets.R\n# ...\nanalyze_data &lt;- function(data) {\n  browser() # Pause the pipeline here.\n  gls(\n    model = outcome ~ factor,\n    data = data,\n    correlation = corSymm(form = ~ measurement | unit),\n    weights = varIdent(form = ~ 1 | measurement)\n  ) %&gt;%\n    tidy(conf.int = TRUE, conf.level = 0.95)\n}\n# ...\n\n\n# R console\nlibrary(targets)\n\n# Restart your R session.\nrstudioapi::restartSession()\n\n# Run the pipeline in your interactive R session (no callr process)\ntar_make(callr_function = NULL)\n#&gt; ✔ skip target dataset1\n#&gt; • start target model\n#&gt; Called from: analyze_data(dataset1)\n\n# Tinker with the R session to see if you can reproduce the error.\nBrowse[1]&gt; model &lt;- gls(\n+   model = outcome ~ factor,\n+   data = data,\n+   correlation = corSymm(form = ~ measurement | unit),\n+   weights = varIdent(form = ~ 1 | measurement)\n+ )\n#&gt; Error in na.fail.default(list(measurement = c(1L, 2L, 3L, 4L, 1L, 2L,  : \n#&gt;   missing values in object\n\n# Figure out what it would take to fix the error.\nBrowse[1]&gt; model &lt;- gls(\n+   model = outcome ~ factor,\n+   data = data,\n+   correlation = corSymm(form = ~ measurement | unit),\n+   weights = varIdent(form = ~ 1 | measurement),\n+   na.action = na.omit\n+ )\n\n# Confirm that the bug is fixed.\nBrowse[1]&gt; tidy(model, conf.int = TRUE, conf.level = 0.95)\n#&gt; # A tibble: 2 × 7\n#&gt;   term        estimate std.error statistic       p.value conf.low conf.high\n#&gt; * &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1 (Intercept)    0.795    0.148       5.36 0.000000145      0.504     1.09 \n#&gt; 2 factor         0.275    0.0466      5.92 0.00000000717    0.184     0.367"
  },
  {
    "objectID": "debugging.html#pause-the-pipeline-with-the-debug-option",
    "href": "debugging.html#pause-the-pipeline-with-the-debug-option",
    "title": "4  Debugging",
    "section": "4.8 Pause the pipeline with the debug option",
    "text": "4.8 Pause the pipeline with the debug option\nIt may be too tedious to comb through all targets with browser(). For example, what if the pipeline has hundreds of simulated datasets? The following pipeline simulates 100 datasets with 58 experimental units each and 100 datasets with 70 experimental units each. Each dataset is analyzed with gls(). tar_map_rep() from the tarchetypes package organizes this simulation structure and batches the replications for computational efficiency.\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\n\ntar_option_set(\n  packages = c(\"broom\", \"broom.mixed\", \"dplyr\", \"nlme\", \"tibble\", \"tidyr\")\n)\n\nsimulate_data &lt;- function(units) {\n  tibble(unit = seq_len(units), factor = rnorm(units, mean = 3)) %&gt;%\n    expand_grid(measurement = seq_len(4)) %&gt;%\n    mutate(outcome = sqrt(factor) + rnorm(n()))\n}\n\nanalyze_data &lt;- function(data) {\n  gls(\n    model = outcome ~ factor,\n    data = data,\n    correlation = corSymm(form = ~ measurement | unit),\n    weights = varIdent(form = ~ 1 | measurement)\n  ) %&gt;%\n    tidy(conf.int = TRUE, conf.level = 0.95)\n}\n\nsimulate_and_analyze_one_dataset &lt;- function(units) {\n  data &lt;- simulate_data(units)\n  analyze_data(data)\n}\n\nlist(\n  tar_map_rep( # from the {tarchetypes} package\n    name = analysis,\n    command = simulate_and_analyze_one_dataset(units),\n    values = data.frame(units = c(58, 70)), # 2 data size scenarios.\n    names = all_of(\"units\"), # The columns of values to use to name the targets.\n    batches = 20, # For each scenario, divide the 100 simulations into 20 dynamic branch targets.\n    reps = 5 # Each branch target (batch) runs simulate_and_analyze_one_dataset(n = 100) 5 times.\n  )\n)\n\n\n# R console\ntar_make()\n#&gt; ✔ skip target analysis_batch\n#&gt; • start branch analysis_58_550d992c\n#&gt; • built branch analysis_58_550d992c [1.2 seconds]\n#&gt; • start branch analysis_58_582bca0a\n#&gt; • built branch analysis_58_582bca0a [0.895 seconds]\n#&gt; • start branch analysis_58_f0ac3217\n#&gt; • built branch analysis_58_f0ac3217 [0.848 seconds]\n#&gt; • start branch analysis_58_35d814c0\n#&gt; ✖ error branch analysis_58_35d814c0\n#&gt; • end pipeline [3.56 seconds]\n#&gt; Warning messages:\n#&gt; 1: NaNs produced \n#&gt; 2: 1 targets produced warnings. Run tar_meta(fields = warnings, complete_only = TRUE) for the messages. \n#&gt; Error:\n#&gt; ! Error running targets::tar_make()\n#&gt;   Target errors: targets::tar_meta(fields = error, complete_only = TRUE)\n#&gt;   Tips: https://books.ropensci.org/targets/debugging.html\n#&gt;   Last error: missing values in object\n\nRemember, if you just want to see the results that succeeded, run the pipeline with error = \"null\" in tar_option_set(). This temporary workaround is especially helpful with so many simulations.\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\n\ntar_option_set(\n  packages = c(\"broom\", \"broom.mixed\", \"dplyr\", \"nlme\", \"tibble\", \"tidyr\"),\n  error = \"null\"\n)\n\n# Functions etc...\n\n\n# R console\ntar_make()\n#&gt; • start target analysis_batch\n#&gt; • built target analysis_batch [0.002 seconds]\n#&gt; • start branch analysis_58_550d992c\n#&gt; • built branch analysis_58_550d992c [1.252 seconds]\n#&gt; • start branch analysis_58_582bca0a\n#&gt; • built branch analysis_58_582bca0a [0.864 seconds]\n#&gt; • start branch analysis_58_f0ac3217\n#&gt; • built branch analysis_58_f0ac3217 [0.838 seconds]\n#&gt; • start branch analysis_58_35d814c0\n#&gt; ✖ error branch analysis_58_35d814c0\n#&gt; ✖ error branch analysis_58_35d814c0\n#&gt; • start branch analysis_58_e8c6aeab\n#&gt; • built branch analysis_58_e8c6aeab [0.774 seconds]\n#&gt; # More targets...\n#&gt; # ...\n#&gt; • start target analysis\n#&gt; • built target analysis [0.008 seconds]\n#&gt; • end pipeline [27.823 seconds]\n\n# Read the simulations that succeeded.\ntar_read(analysis)\n#&gt; # A tibble: 270 × 12\n#&gt;    term        estimate std.error statistic      p.value conf.low conf.high units tar_batch tar_rep   tar_seed tar_group\n#&gt;    &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;     &lt;int&gt;   &lt;int&gt;      &lt;int&gt;     &lt;int&gt;\n#&gt;  1 (Intercept)    0.758    0.234       3.24 0.00137        0.300      1.22     58         1       1 -633351515         1\n#&gt;  2 factor         0.306    0.0696      4.40 0.0000168      0.170      0.443    58         1       1 -633351515         1\n#&gt;  3 (Intercept)    0.524    0.229       2.28 0.0232         0.0745     0.974    58         1       2 -915590912         1\n#&gt;  4 factor         0.402    0.0708      5.68 0.0000000402   0.263      0.541    58         1       2 -915590912         1\n#&gt;  5 (Intercept)    0.797    0.195       4.08 0.0000624      0.414      1.18     58         1       3 1619222314         1\n#&gt;  6 factor         0.295    0.0611      4.82 0.00000257     0.175      0.414    58         1       3 1619222314         1\n#&gt;  7 (Intercept)    0.639    0.216       2.96 0.00336        0.216      1.06     58         1       4  825884824         1\n#&gt;  8 factor         0.376    0.0723      5.21 0.000000424    0.235      0.518    58         1       4  825884824         1\n#&gt;  9 (Intercept)    0.850    0.151       5.63 0.0000000521   0.554      1.15     58         1       5 2080314913         1\n#&gt; 10 factor         0.270    0.0507      5.31 0.000000252    0.170      0.369    58         1       5 2080314913         1\n#&gt; # … with 260 more rows\n#&gt; # ℹ Use `print(n = ...)` to see more rows\n\nNow let’s seriously debug this pipeline. If each call to simulate_and_analyze_one_dataset() takes a long time to run, then the first step is to set one rep per batch in tar_map_rep() while keeping the total number of reps the same. In other words, increase batches from 20 to 100 and decrease reps from 5 to 1.3. Also remove the units = 70 scenario because we can reproduce the error without it.\n\n# _targets.R\n# packages, options, and functions...\nlist(\n  tar_map_rep(\n    name = analysis,\n    command = simulate_and_analyze_one_dataset(units),\n    values = data.frame(units = 58), # Remove the units = 70 scenario.\n    names = all_of(\"units\"),\n    batches = 100, # 100 batches now\n    reps = 1 # 1 rep per batch now\n  )\n)\n\n\n# R console\ntar_make()\n#&gt; • start target analysis_batch\n#&gt; • built target analysis_batch [0.002 seconds]\n#&gt; • start branch analysis_58_550d992c\n#&gt; • built branch analysis_58_550d992c [0.502 seconds]\n#&gt; • start branch analysis_58_582bca0a\n#&gt; • built branch analysis_58_582bca0a [0.208 seconds]\n#&gt; • start branch analysis_58_f0ac3217\n#&gt; # More successful targets...\n#&gt; # ...\n#&gt; • start branch analysis_58_b59aa384\n#&gt; ✖ error branch analysis_58_b59aa384\n#&gt; • end pipeline [3.828 seconds]\n#&gt; Warning messages:\n#&gt; 1: NaNs produced \n#&gt; 2: 1 targets produced warnings. Run tar_meta(fields = warnings, complete_only = TRUE) for the messages. \n#&gt; Error:\n#&gt; ! Error running targets::tar_make()\n#&gt;   Target errors: targets::tar_meta(fields = error, complete_only = TRUE)\n#&gt;   Tips: https://books.ropensci.org/targets/debugging.html\n#&gt;   Last error: missing values in object\n\nAround 20 targets ran successfully, and target analysis_58_b59aa384 hit an error. Let’s interactively debug analysis_58_b59aa384 without interfering with any other targets:\n\nSet the debug option to \"analysis_58_b59aa384\" in tar_option_set().\nOptional: set cue = tar_cue(mode = \"never\") in tar_option_set() to force skip all targets except:\n\nanalysis_58_b59aa384 and other targets in the debug option.\ntargets that do not already exist in the metadata.\ntargets that set their own cues.\n\nRestart your R session to remove detritus from memory.\nRun tar_make(callr_function = NULL).4\n\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\n\ntar_option_set(\n  packages = c(\"broom\", \"broom.mixed\", \"dplyr\", \"nlme\", \"tibble\", \"tidyr\"),\n  debug = \"analysis_58_b59aa384\", # Set the target you want to debug.\n  cue = tar_cue(mode = \"never\") # Force skip non-debugging outdated targets.\n)\n\n# Functions etc...\n\n\n# R console\nlibrary(targets)\n\n# Restart your R session.\nrstudioapi::restartSession()\n\n# Run the pipeline in your interactive R session (no callr process)\ntar_make(callr_function = NULL)\n#&gt;✔ skip target analysis_batch\n#&gt;✔ skip branch analysis_58_550d992c\n#&gt;✔ skip branch analysis_58_582bca0a\n#&gt;✔ skip branch analysis_58_f0ac3217\n#&gt;✔ skip branch analysis_58_35d814c0\n#&gt;✔ skip branch analysis_58_e8c6aeab\n#&gt;✔ skip branch analysis_58_18f79420\n#&gt;✔ skip branch analysis_58_1af19a55\n#&gt;✔ skip branch analysis_58_5e604f91\n#&gt;✔ skip branch analysis_58_5d2c5812\n#&gt;✔ skip branch analysis_58_729b7859\n#&gt;✔ skip branch analysis_58_d3899b7b\n#&gt;✔ skip branch analysis_58_2a182d3f\n#&gt;✔ skip branch analysis_58_5be362d3\n#&gt;✔ skip branch analysis_58_5d86137a\n#&gt;✔ skip branch analysis_58_a3562efd\n#&gt;✔ skip branch analysis_58_a6d57bfd\n#&gt;✔ skip branch analysis_58_f15d092c\n#&gt;✔ skip branch analysis_58_53efc7f5\n#&gt;• start branch analysis_58_b59aa384\n#&gt;• pause pipeline\n#&gt;  debug target analysis_58_b59aa384\n#&gt;\n#&gt;ℹ You are now running an interactive debugger.\n#&gt;  You can enter code and print objects as with the normal R console.\n#&gt;  How to use: https://adv-r.hadley.nz/debugging.html#browser\n#&gt;\n#&gt;ℹ The debugger is poised to run the command of target analysis_58_b59aa384:\n#&gt;\n#&gt;     tarchetypes::tar_rep_run(command = tarchetypes::tar_append_static_values(object = simulate_and_analyze_one_dataset(58), \n#&gt;    values = list(units = 58)), batch = analysis_batch, reps = 1, \n#&gt;    iteration = \"vector\")\n#&gt;\n#&gt;ℹ Tip: run debug(tarchetypes::tar_rep_run) and then enter \"c\"\n#&gt;  to move the debugger inside function tarchetypes::tar_rep_run().\n#&gt;  Then debug the function as you would normally (without {targets}).\n#&gt;Called from: eval(expr = expr, envir = envir)\nBrowse[1]&gt;\n\nAt this point, we are in an interactive debugger again. Only this time, we quickly skipped straight to the target we want to debug. We can follow the advice in the prompt above, or we can tinker in other ways.\n\n# R console\n# Jump to the function we want to debug.\nBrowse[1]&gt; debug(analyze_data)\nBrowse[1]&gt; c # Continue to the next breakpoint.\n#&gt; debugging in: analyze_data(data)\n\n# Tinker with the R session to see if you can reproduce the error.\nBrowse[2]&gt; model &lt;- gls(\n+   model = outcome ~ factor,\n+   data = data,\n+   correlation = corSymm(form = ~ measurement | unit),\n+   weights = varIdent(form = ~ 1 | measurement)\n+ )\n#&gt; Error in na.fail.default(list(measurement = c(1L, 2L, 3L, 4L, 1L, 2L,  : \n#&gt;   missing values in object\n\n# Figure out what it would take to fix the error.\nBrowse[1]&gt;  model &lt;- gls(\n+   model = outcome ~ factor,\n+   data = data,\n+   correlation = corSymm(form = ~ measurement | unit),\n+   weights = varIdent(form = ~ 1 | measurement),\n+   na.action = na.omit\n+ )\n\n# Confirm that the bug is fixed.\nBrowse[1]&gt; tidy(model, conf.int = TRUE, conf.level = 0.95)\n#&gt; # A tibble: 2 × 7\n#&gt;   term        estimate std.error statistic   p.value conf.low conf.high\n#&gt; * &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1 (Intercept)    0.925    0.205       4.51 0.0000103    0.523     1.33 \n#&gt; 2 factor         0.279    0.0646      4.32 0.0000230    0.153     0.406"
  },
  {
    "objectID": "debugging.html#workspaces",
    "href": "debugging.html#workspaces",
    "title": "4  Debugging",
    "section": "4.9 Workspaces",
    "text": "4.9 Workspaces\nA workspace is a special file that helps locally reconstruct the environment of a target outside the pipeline. To demonstrate, consider a different version of the above example which saves the datasets and the models in different targets. We set workspace_on_error = TRUE in tar_option_set() so that each errored target proactively saves a workspace file.5\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\n\ntar_option_set(\n  packages = c(\"broom\", \"broom.mixed\", \"dplyr\", \"nlme\", \"tibble\", \"tidyr\"),\n  workspace_on_error = TRUE # Save a workspace file for a target that errors out.\n)\n\nsimulate_data &lt;- function(units) {\n  tibble(unit = seq_len(units), factor = rnorm(units, mean = 3)) %&gt;%\n    expand_grid(measurement = seq_len(4)) %&gt;%\n    mutate(outcome = sqrt(factor) + rnorm(n()))\n}\n\nanalyze_data &lt;- function(data) {\n  gls(\n    model = outcome ~ factor,\n    data = data,\n    correlation = corSymm(form = ~ measurement | unit),\n    weights = varIdent(form = ~ 1 | measurement)\n  ) %&gt;%\n    tidy(conf.int = TRUE, conf.level = 0.95)\n}\n\nlist(\n  tar_target(rep, seq_len(100)),\n  tar_target(data, simulate_data(100), pattern = map(rep)),\n  tar_target(analysis, analyze_data(data), pattern = map(data))\n)\n\n\n# R console\ntar_make()\n#&gt; • start target rep\n#&gt; • built target rep [0.6 seconds]\n#&gt; • start branch data_c9beb7ca\n#&gt; • built branch data_c9beb7ca [0.015 seconds]\n#&gt; • start branch data_3658ffe6\n#&gt; • built branch data_3658ffe6 [0.009 seconds]\n#&gt; • start branch data_b786c6ae\n#&gt; # More data targets...\n#&gt; # ...\n#&gt; • built pattern data\n#&gt; • start branch analysis_3ccf0b08\n#&gt; • built branch analysis_3ccf0b08 [0.214 seconds]\n#&gt; • start branch analysis_0e85e530\n#&gt; • built branch analysis_0e85e530 [0.227 seconds]\n#&gt; • start branch analysis_03816a9f\n#&gt; # More analysis targets...\n#&gt; # ...\n#&gt; • start branch analysis_02de2921\n#&gt; • record workspace analysis_02de2921\n#&gt; ✖ error branch analysis_02de2921\n#&gt; • end pipeline [5.619 seconds]\n#&gt; There were 15 warnings (use warnings() to see them)\n#&gt; Error:\n#&gt; ! Error running targets::tar_make()\n#&gt;   Target errors: targets::tar_meta(fields = error, complete_only = TRUE)\n#&gt;   Tips: https://books.ropensci.org/targets/debugging.html\n#&gt;   Last error: missing values in object\n\nWhat went wrong with target analysis_02de2921? To find out, we load the workspace in an interactive session.\n\n# R console\n# List the available workspaces.\ntar_workspaces()\n#&gt; [1] \"analysis_02de2921\"\n\n# Load the workspace.\ntar_workspace(analysis_02de2921)\n\nAt this point, the global objects, functions, and upstream dependencies of target analysis_02de2921 are in memory. In addition, the target’s original random number generator seed is set.6\n\n# R console\nls()\n#&gt; [1] \"analyze_data\"  \"data\"          \"simulate_data\"\n\nWith the data and functions in hand, you can reproduce the error locally.\n\n# R console\nanalyze_data(data)\n#&gt; Error in na.fail.default(list(measurement = c(1L, 2L, 3L, 4L, 1L, 2L,  :\n#&gt;   missing values in object\n\nFor more assistance, you can load the [traceback] from the workspace file.\n\ntar_traceback(analysis_02de2921)\n#  [1] \"eval(expr = expr, envir = envir)\"\n#  [2] \"eval(expr = expr, envir = envir)\"\n#  [3] \"analyze_data(data)\"\n#  [4] \"gls(model = outcome ~ factor, data = data, correlation = corSymm(form = ~measurement | unit), weights = varIden\"\n#  [5] \"tidy(., conf.int = TRUE, conf.level = 0.95)\"\n#  [6] \"gls(model = outcome ~ factor, data = data, correlation = corSymm(form = ~measurement | unit), weights = varIden\"\n#  [7] \"do.call(model.frame, mfArgs)\"\n#  [8] \"(function (formula, ...) \\nUseMethod(\\\"model.frame\\\"))(formula = ~measurement + unit + outcome + factor, data = li\"\n#  [9] \"model.frame.default(formula = ~measurement + unit + outcome + factor, data = list(c(1, 1, 1, 1, 2, 2, 2, 2, 3, \"\n# [10] \"(function (object, ...) \\nUseMethod(\\\"na.fail\\\"))(list(c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, \"\n# [11] \"na.fail.default(list(c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2\"\n# [12] \"stop(\\\"missing values in object\\\")\"\n# [13] \".handleSimpleError(function (condition) \\n{\\n    state$error &lt;- build_message(condition)\\n    state$traceback &lt;- b\"\n# [14] \"h(simpleError(msg, call))\""
  },
  {
    "objectID": "debugging.html#footnotes",
    "href": "debugging.html#footnotes",
    "title": "4  Debugging",
    "section": "",
    "text": "You can fix the bug by either removing the missing values from the dataset or by setting na.action = na.omit in gls().↩︎\nWith callr_function = NULL, a messy local R environment can accidentally change the functions and objects that a target depends on, which can invalidate those targets and erase hard-earned results that were previously correct. This is why targets uses callr in the first place, and it is why callr_function = NULL is for debugging only. If you do need callr_function = NULL, please restart your R session first.↩︎\nIn tarchetypes version 0.7.1.9000 and above, this re-batching will not change the random number generator seed assigned to each call to simulate_and_analyze_one_dataset().↩︎\nYou can also run tar_make_clustermq(callr_function = NULL) or tar_make_future(callr_function = NULL). In either case, the target to debug will not run on a parallel worker even if you set deployment = \"worker\".↩︎\ntar_option_set() also has a workspaces argument to let you choose which targets save workspace files, regardless of whether they hit errors.↩︎\nYou can retrieve this seed with tar_meta(names = analysis_02de2921, fields = seed). In the pipeline, targets sets this seed with withr::with_seed() just before running the target. However, other functions or target factories may set their own seeds. For example, tarchetypes::tar_map_rep() sets its own target seeds so they are resilient to re-batching. For more details on seeds, see the documentation of the seed argument of tar_option_set().↩︎"
  },
  {
    "objectID": "functions.html#problems-with-script-based-workflows",
    "href": "functions.html#problems-with-script-based-workflows",
    "title": "5  Functions",
    "section": "5.1 Problems with script-based workflows",
    "text": "5.1 Problems with script-based workflows\nTraditional data analysis projects consist of imperative scripts, often with with numeric prefixes.\n01-data.R\n02-model.R\n03-plot.R\nTo run the project, the user runs each of the scripts in order.\n\nsource(\"01-data.R\")\nsource(\"02-model.R\")\nsource(\"03-plot.R\")\n\nEach script executes a different part of the workflow.\n\n# 01-data.R\nlibrary(tidyverse)\ndata &lt;- \"data.csv\" %&gt;%\n  read_csv(col_types = cols()) %&gt;%\n  filter(!is.na(Ozone))\nwrite_csv(data, \"data.rds\")\n\n\n# 02-model.R\nlibrary(biglm)\nlibrary(tidyverse)\ndata &lt;- read_rds(\"data.rds\", col_types = cols())\nmodel &lt;- lm(Ozone ~ Temp, data) %&gt;%\n  coefficients()\nsaveRDS(model, \"model.rds\")\n\n\n# 03-plot.R\nlibrary(tidyverse)\nmodel &lt;- readRDS(\"model.rds\")\ndata &lt;- readRDS(\"data.rds\")\nplot &lt;- ggplot(data) +\n  geom_point(aes(x = Temp, y = Ozone)) +\n  geom_abline(intercept = model[1], slope = model[2]) +\n  theme_gray(24)\nggsave(\"plot.png\", plot)\n\nAlthough this approach may feel convenient at first, it scales poorly for medium-sized workflows. These imperative scripts are monolithic, and they grow too large and complicated to understand or maintain."
  },
  {
    "objectID": "functions.html#functions",
    "href": "functions.html#functions",
    "title": "5  Functions",
    "section": "5.2 Functions",
    "text": "5.2 Functions\nFunctions are the building blocks of most computer code. They make code easier to think about, and they break down complicated ideas into small manageable pieces. Out of context, you can develop and test a function in isolation without mentally juggling the rest of the project. In the context of the whole workflow, functions are convenient shorthand to make your work easier to read.\nIn addition, functions are a nice mental model to express data science. A data analysis workflow is a sequence of transformations: datasets map to analyses, and analyses map to summaries. In fact, a function for data science typically falls into one of three categories:\n\nProcess a dataset.\nAnalyze a dataset.\nSummarize an analysis.\n\nThe example from the walkthrough chapter is a simple instance of this structure."
  },
  {
    "objectID": "functions.html#writing-functions",
    "href": "functions.html#writing-functions",
    "title": "5  Functions",
    "section": "5.3 Writing functions",
    "text": "5.3 Writing functions\nLet us begin with our imperative code for data processing. Every time you look at it, you need to read it carefully and relearn what it does. And test it, you need to copy the entire block into the R console.\n\ndata &lt;- \"data.csv\" %&gt;%\n  read_csv(col_types = cols()) %&gt;%\n  filter(!is.na(Ozone))\n\nIt is better to encapsulate this code in a function.\n\nget_data &lt;- function(file) {\n  read_csv(file, col_types = cols()) %&gt;%\n    as_tibble() %&gt;%\n    filter(!is.na(Ozone))\n}\n\nNow, instead of invoking a whole block of text, all you need to do is type a small reusable command. The function name speaks for itself, so you can recall what it does without having to mentally process all the details again.\n\nget_data(\"data.csv\")\n\nAs with the data, we can write a function to fit a model,\n\nfit_model &lt;- function(data) {\n  lm(Ozone ~ Temp, data) %&gt;%\n    coefficients()\n}\n\nand another function to plot the model against the data.\n\nplot_model &lt;- function(model, data) {\n  ggplot(data) +\n    geom_point(aes(x = Temp, y = Ozone)) +\n    geom_abline(intercept = model[1], slope = model[2]) +\n    theme_gray(24)\n}"
  },
  {
    "objectID": "functions.html#functions-in-pipelines",
    "href": "functions.html#functions-in-pipelines",
    "title": "5  Functions",
    "section": "5.4 Functions in pipelines",
    "text": "5.4 Functions in pipelines\nWithout those functions, our pipeline in the walkthrough chapter would look long, complicated, and difficult to digest.\n\n# _targets.R\nlibrary(targets)\nsource(\"R/functions.R\")\ntar_option_set(packages = c(\"tibble\", \"readr\", \"dplyr\", \"ggplot2\"))\nlist(\n  tar_target(file, \"data.csv\", format = \"file\"),\n  tar_target(\n    data,\n    read_csv(file, col_types = cols()) %&gt;%\n      filter(!is.na(Ozone))\n  ),\n  tar_target(\n    model,\n    lm(Ozone ~ Temp, data) %&gt;%\n      coefficients()\n  ),\n  tar_target(\n    plot,\n    ggplot(data) +\n      geom_point(aes(x = Temp, y = Ozone)) +\n      geom_abline(intercept = model[1], slope = model[2]) +\n      theme_gray(24)\n  )\n)\n\nBut if we write our functions in R/functions.R and source() them into the target script file (default: _targets.R) the pipeline becomes much easier to read. We can even condense out raw_data and data targets together without creating a large command.\n\n# _targets.R\nlibrary(targets)\nsource(\"R/functions.R\")\ntar_option_set(packages = c(\"tibble\", \"readr\", \"dplyr\", \"ggplot2\"))\nlist(\n  tar_target(file, \"data.csv\", format = \"file\"),\n  tar_target(data, get_data(file)),\n  tar_target(model, fit_model(data)),\n  tar_target(plot, plot_model(model, data))\n)"
  },
  {
    "objectID": "functions.html#tracking-changes",
    "href": "functions.html#tracking-changes",
    "title": "5  Functions",
    "section": "5.5 Tracking changes",
    "text": "5.5 Tracking changes\nTo help figure out which targets to rerun and which ones to skip, the targets package tracks changes to the functions you define. To track changes to a function, targets computes a hash. This hash fingerprints the deparsed function (body and arguments) together with the hashes of all global functions and objects called that function. So if the function’s body, arguments, or dependencies change nontrivially, that change will be detected.\nThis hashing system is not perfect. For example, functions created by Rcpp::cppFunction() do not show the state of the underlying C++ code. As a workaround, you can use a wrapper that inserts the C++ code into the R function body so targets can track it for meaningful changes.\n\ncpp_function &lt;- function(code) {\n  out &lt;- Rcpp::cppFunction(code)\n  body(out) &lt;- rlang::call2(\"{\", code, body(out))\n  out\n}\n\nyour_function &lt;- cpp_function(\n  \"int your_function(int x, int y, int z) {\n     int sum = x + y + z;\n     return sum;\n   }\"\n)\n\nFunctions produced by Vectorize() and purrr::safely() suffer similar issues because the actual function code is in the closure of the function instead of the body. In addition, functions from packages are not automatically tracked, and extra steps documented in the packages chapter are required to enable this.\nIt is impossible to eliminate every edge case, so before running the pipeline, please run the dependency graph and other utilities to check your understanding of the state of project."
  },
  {
    "objectID": "targets.html#target-names",
    "href": "targets.html#target-names",
    "title": "6  Targets",
    "section": "6.1 Target names",
    "text": "6.1 Target names\nA target is an abstraction. The targets package automatically manages data storage and retrieval under the hood, which means you do not need to reference a target’s data file directly (e.g. _targets/objects/your_target_name). Instead, your R code should refer to a target name as if it were a variable in an R session. In other words, from the point of view of the user, a target is an R object in memory. That means a target name must be a valid visible symbol name for an R variable. The name must not begin with a dot, and it must be a string that lets you assign a value, e.g. your_target_name &lt;- TRUE. For stylistic considerations, please refer to the tidyverse style guide syntax chapter."
  },
  {
    "objectID": "targets.html#what-a-target-should-do",
    "href": "targets.html#what-a-target-should-do",
    "title": "6  Targets",
    "section": "6.2 What a target should do",
    "text": "6.2 What a target should do\nLike a good function, a good target generally does one of three things:\n\nCreate a dataset.\nAnalyze a dataset with a model.\nSummarize an analysis or dataset.\n\nIf a function gets too long, you can split it into nested sub-functions that make your larger function easier to read and maintain."
  },
  {
    "objectID": "targets.html#how-much-a-target-should-do",
    "href": "targets.html#how-much-a-target-should-do",
    "title": "6  Targets",
    "section": "6.3 How much a target should do",
    "text": "6.3 How much a target should do\nThe targets package automatically skips targets that are already up to date, so it is best to define targets that maximize time savings. Good targets usually\n\nAre large enough to subtract a decent amount of runtime when skipped.\nAre small enough that some targets can be skipped even if others need to run.\nInvoke no side effects such as modifications to the global environment. (But targets with tar_target(format = \"file\") can save files.)\nReturn a single value that is\n\nEasy to understand and introspect.\nMeaningful to the project.\nEasy to save as a file, e.g. with readRDS(). Please avoid non-exportable objects as target return values or global variables.\n\n\nRegarding the last point above, it is possible to customize the storage format of the target. For details, enter ?tar_target in the console and scroll down to the description of the format argument."
  },
  {
    "objectID": "targets.html#working-with-tools-outside-r",
    "href": "targets.html#working-with-tools-outside-r",
    "title": "6  Targets",
    "section": "6.4 Working with tools outside R",
    "text": "6.4 Working with tools outside R\nEach target runs R code, so to invoke a tool outside R, consider system2() or processx to call the appropriate system commands. This technique allows you to run shell scripts, Python scripts, etc. from within R. External scripts should ideally be tracked as input files using tar_target(format = \"file\") as described in section on external input files. There are also specialized R packages to retrieve data from remote sources and invoke web APIs, including rnoaa, ots, and aws.s3, and you may wish to use custom cues to automatically invalidate a target when the upstream remote data changes."
  },
  {
    "objectID": "targets.html#side-effects",
    "href": "targets.html#side-effects",
    "title": "6  Targets",
    "section": "6.5 Side effects",
    "text": "6.5 Side effects\nLike a good pure function, a good target should return a single value and not produce side effects. (The exception is output file targets which create files and return their paths.) Avoid modifying the global environment with calls to data() or source(). If you need to source scripts to define global objects, please do so at the top of your target script file (default: _targets.R) just like source(\"R/functions.R\") from the walkthrough vignette."
  },
  {
    "objectID": "targets.html#dependencies",
    "href": "targets.html#dependencies",
    "title": "6  Targets",
    "section": "6.6 Dependencies",
    "text": "6.6 Dependencies\nConsider the following pipeline.\n\n# _targets.R file\nlibrary(targets)\n\nglobal_object &lt;- 3\n\ninner_function &lt;- function(argument) {\n  local_object &lt;- 1\n  argument + global_object + local_object + 2\n}\n\nouter_function &lt;- function(object) {\n  object + inner_function(object) + 1\n}\n\nlist(\n  tar_target(\n    name = second_target,\n    command = outer_function(first_target) + 2\n  ),\n  tar_target(\n    name = first_target,\n    command = 2\n  )\n)\n\nIn order to run properly, second_target needs up-to-date versions of first_target and outer_function(). In other words, first_target and outer_function() are dependencies of second_target. Likewise, inner_function() is a dependency of outer_function(), and global_object is a dependency of inner_function(). The targets package searches commands and functions for dependencies, noting global symbols like global_object and ignoring local symbols like argument and local_object. The tar_deps() function emulates behavior for you.1\n\ntar_deps(outer_function(first_target) + 2)\n#&gt; [1] \"+\"              \"first_target\"   \"outer_function\"\n\n\ntar_deps(\n  function(argument) {\n    local_object &lt;- 1\n    argument + global_object + local_object + 2\n  }\n)\n#&gt; [1] \"{\"             \"+\"             \"&lt;-\"            \"global_object\"\n\nAfter it discards dangling symbols like { and &lt;-, targets translates the dependency information into a dependency graph that you can visualize with tar_visnetwork(). It is good practice to make sure this graph has the correct nodes connected with the correct edges.\n\n# R console\ntar_visnetwork()\n\n\n\n\n\n\n\nThe dependency graph is a directed acyclic graph (DAG) representation of the pipeline, where each node is a target or global object and each directed edge indicates where a downstream node depends on an upstream node. The DAG is not always a tree, but it never contains a cycle because no target is allowed to directly or indirectly depend on itself. The dependency graph should show a natural progression of work from left to right.2 targets uses static code analysis to build the graph, so the order of tar_target() calls in the target list does not matter. However, targets does not support self-referential loops or other cycles.\nWhen you run the pipeline with tar_make()3, targets runs the correct targets in the correct order with the correct resources according to the graph. For example, by the time second_target starts running, targets makes sure:\n\nDependency target first_target has already finished running.\nDependencies first_target and outer_function() are up to date.\nDependencies first_target and outer_function() are loaded into memory for second_target to use.\n\n\n# R console\ntar_make()\n#&gt; ▶ start target first_target\n#&gt; ● built target first_target [0.001 seconds]\n#&gt; ▶ start target second_target\n#&gt; ● built target second_target [0.001 seconds]\n#&gt; ▶ end pipeline [0.085 seconds]\n\nAt this point, any of the following changes will cause the next tar_make() to rerun second_target.\n\nChange the value of global_object.\nChange the body or arguments of inner_function().\nChange the body or arguments of outer_function().\nChange the command or value of first_target.\nChange the command of second_target."
  },
  {
    "objectID": "targets.html#return-value",
    "href": "targets.html#return-value",
    "title": "6  Targets",
    "section": "6.7 Return value",
    "text": "6.7 Return value\nThe return value of a target should be an R object that can be saved to disk and hashed.\n\n6.7.1 Saving\nThe object should be compatible with the storage format you choose using the format argument of tar_target() or tar_option_set(). For example, if the format is \"rds\" (default), then the target should return an R object that can be saved with saveRDS() and safely loaded properly into another session. Please avoid returning non-exportable objects such as connection objects, Rcpp pointers, xgboost matrices, and greta models4.\n\n\n6.7.2 Hashing\nOnce a target is saved to disk, targets computes a digest hash to track changes to the data file(s). These hashes are used to decide whether each target is up to date or needs to rerun. In order for the hash to be useful, the data you return from a target must be an accurate reflection of the underlying content of the data. So please try to return the actual data instead of an object that wraps or points to the data. Otherwise, the package will make incorrect decisions regarding which targets can skip and which need to rerun.\n\n\n6.7.3 Workaround\nAs a workaround, you can write custom functions to create temporary instances of these non-exportable/non-hashable objects and clean them up after the task is done. The following sketch creates a target that returns a database table while managing a transient connection object.\n\n# _targets.R\nlibrary(targets)\n\nget_from_database &lt;- function(table, ...) {\n  con &lt;- DBI::dbConnect(...)\n  on.exit(close(con))\n  dbReadTable(con, table)\n}\n\nlist(\n  tar_target(\n    table_from_database,\n    get_from_database(\"my_table\", ...), # ... has use-case-specific arguments.\n    format = \"feather\" # Requires that the return value is a data frame.\n  )\n)"
  },
  {
    "objectID": "targets.html#footnotes",
    "href": "targets.html#footnotes",
    "title": "6  Targets",
    "section": "",
    "text": "tar_deps() uses the findGlobals() function from the codetools package, with some minor adjustments. See https://adv-r.hadley.nz/expressions.html?q=ast#ast-funs for more information on static code analysis.↩︎\nIf you have hundreds of targets, then tar_visnetwork() may be slow. If that happens, consider temporarily commenting out some targets in _targets.R just for visualization purposes.↩︎\nor tar_make_clustermq() or tar_make_future()↩︎\nSpecial exceptions are granted to Keras and Torch models, which can be safely returned from targets if you specify format = \"keras\" or format = \"torch\".↩︎"
  },
  {
    "objectID": "packages.html#loading-and-configuring-r-packages",
    "href": "packages.html#loading-and-configuring-r-packages",
    "title": "7  Packages",
    "section": "7.1 Loading and configuring R packages",
    "text": "7.1 Loading and configuring R packages\nFor most pipelines, it is straightforward to load the R packages that your targets need in order to run. You can either:\n\nCall library() at the top of the target script file (default: _targets.R) to load each package the conventional way, or\nName the required packages using the packages argument of tar_option_set().\n\n2. is often faster, especially for utilities like tar_visnetwork(), because it avoids loading packages unless absolutely necessary.\nSome package management workflows are more complicated. If your use special configuration with conflicted, box, import, or similar utility, please do your configuration inside a project-level .Rprofile file instead of the target script file (default: _targets.R). In addition, if you use distributed workers inside external containers (Docker, Singularity, AWS AMI, etc.) make sure each container has a copy of this same .Rprofile file where the R worker process spawns. This approach is ensures that all remote workers are configured the same way as the local main process."
  },
  {
    "objectID": "packages.html#package-management-with-renv",
    "href": "packages.html#package-management-with-renv",
    "title": "7  Packages",
    "section": "7.2 Package management with renv",
    "text": "7.2 Package management with renv\ntargets and renv work extremely well together as an overall reproducibility solution for data analysis pipelines. targets makes sure your results are up to date, and renv keeps track of the packages you use.\nIf you use renv, then overhead from project initialization could slow down pipelines and workers. If you experience slowness, please make sure your renv library is on a fast file system. (For example, slow network drives can severely reduce performance.) In addition, you can disable the slowest initialization checks. After confirming at https://rstudio.github.io/renv/reference/config.html that you can safely disable these checks, you can write the following lines in your user-level .Renviron file:\nRENV_CONFIG_RSPM_ENABLED=false\nRENV_CONFIG_SANDBOX_ENABLED=false\nRENV_CONFIG_SYNCHRONIZED_CHECK=false\nIf you disable the synchronization check, remember to call renv::status() periodically to check the health of your renv project library."
  },
  {
    "objectID": "packages.html#r-packages-as-projects",
    "href": "packages.html#r-packages-as-projects",
    "title": "7  Packages",
    "section": "7.3 R packages as projects",
    "text": "7.3 R packages as projects\nIt is good practice to organize the files of a targets project similar to a research compendium or R package. However, unless have a specific reason to do so, it is usually not necessary to literally implement your targets pipeline as an installable R package with its own DESCRIPTION file. A research compendium backed by a renv library and Git-backed version control is enough reproducibility for most projects."
  },
  {
    "objectID": "packages.html#target-factories",
    "href": "packages.html#target-factories",
    "title": "7  Packages",
    "section": "7.4 Target Factories",
    "text": "7.4 Target Factories\nTo make specific targets pipelines reusable, it is usually better to create a package with specialized target factories tailored to your use case. Packages stantargets and jagstargets are examples, and you can find more information on the broader R Targetopia at https://wlandau.github.io/targetopia/."
  },
  {
    "objectID": "packages.html#package-based-invalidation",
    "href": "packages.html#package-based-invalidation",
    "title": "7  Packages",
    "section": "7.5 Package-based invalidation",
    "text": "7.5 Package-based invalidation\nStill, it is sometimes desirable to treat functions and objects from a package as dependencies when it comes to deciding which targets to rerun and which targets to skip. targets does not track package functions by default because this is not a common need. Usually, local package libraries do not need to change very often, and it is best to maintain a reproducible project library using renv.\nHowever, if you are developing a package alongside a targets pipeline that uses it, you may wish to invalidate certain targets as you make changes to your package. For example, if you are working on a novel statistical method, it is good practice to implement the method itself as an R package and perform the computation for the research paper in one or more targets pipelines.\nTo track the contents of packages package1 and package2, you must\n\nFully install these packages with install.packages() or equivalent. devtools::load_all() is insufficient because it does not make the packages available to parallel workers.\nWrite the following in your target script file (default: _targets.R):\n\n\n# _targets.R\nlibrary(targets)\ntar_option_set(\n  packages = c(\"package1\", \"package2\", ...), # `...` is for other packages.\n  imports = c(\"package1\", \"package2\")\n)\nlist(\n  tar_target(name = output, command = function_from_package1())\n)\n\npackages = c(\"package1\", \"package2\", ...) tells targets to call library(package1), library(package2), etc. before running each target. imports = c(\"package1\", \"package2\") tells targets to dive into the environments of package1 and package2 and reproducibly track all the objects and datasets as if they were part of the global environment. For example, if you define a function function_from_package1() in package1, then you should see a function node for function_from_package1() in the graph produced by tar_visnetwork(targets_only = FALSE), and targets downstream of function_from_package1() will invalidate if you install an update to package1 with a new version of function_from_package1(). The next time you call tar_make(), those invalidated targets will automatically rerun.\nOne limitation is that entire namespaced calls like package1::function_from_package1() are not registered in the dependency graph because of the limitations of the static code analysis capabilities of targets (powered by codetools::findGlobals()). tar_target(name = output, command = function_from_package1()) has a dependency function_from_package1(), but tar_target(name = output, command = package1::function_from_package1()) does not have a dependency package1::function_from_package1(). This is because :: is treated as a function with arguments package and function_from_package1."
  },
  {
    "objectID": "projects.html#extra-reproducibility",
    "href": "projects.html#extra-reproducibility",
    "title": "8  Projects",
    "section": "8.1 Extra reproducibility",
    "text": "8.1 Extra reproducibility\nFor extra reproducibility, it is good practice to use the renv R package for package management and Git/GitHub for code version control. The entire _targets/ data store should generally not be committed to Git because of its large size.1 The broader R community has excellent resources and tutorials on getting started with these third-party tools.\nIf you use renv, then overhead from project initialization could slow down pipelines and workers. If you experience slowness, please make sure your renv library is on a fast file system. (For example, slow network drives can severely reduce performance.) In addition, you can disable the slowest initialization checks. After confirming at https://rstudio.github.io/renv/reference/config.html that you can safely disable these checks, you can write the following lines in your user-level .Renviron file:\nRENV_CONFIG_SANDBOX_ENABLED=false\nRENV_CONFIG_SYNCHRONIZED_CHECK=false\nIf you disable the synchronization check, remember to call renv::status() periodically to check the health of your renv project library."
  },
  {
    "objectID": "projects.html#project-files",
    "href": "projects.html#project-files",
    "title": "8  Projects",
    "section": "8.2 Project files",
    "text": "8.2 Project files\ntargets is mostly indifferent to how you organize the files in your project. However, it is good practice to follow the overall structure of a research compendium or R package (not necessarily with a DESCRIPTION file). It also is good practice to give each project its own unique folder with one targets pipeline, one renv library for package management, and one Git/GitHub repository for code version control. As described later, it is possible to create multiple overlapping projects within a single folder, but this is not recommended for most situations.\nThe walkthrough chapter shows the file structure for a minimal targets project. For more serious projects, the file system may expand to look something like this:\n\n├── .git/\n├── .Rprofile\n├── .Renviron\n├── renv/\n├── index.Rmd\n├── _targets/\n├── _targets.R\n├── _targets.yaml\n├── R/\n├──── functions_data.R\n├──── functions_analysis.R\n├──── functions_visualization.R\n├── data/\n└──── input_data.csv\n\nSome of these files are optional, and they have the following roles.\n\n.git/: a folder automatically created by Git for version control purposes.\n.Rprofile: a text file automatically created by renv to automatically load the project library when you start R at the project root folder. You may wish to add other global configuration here, e.g. declare package precedence using the conflicted package.\n.Renviron: a text file of key-value pairs defining project-level environment variables, e.g. API keys and package settings. See Sys.getenv() for more information on environment variables and how to work with them in R.\n\nindex.Rmd: Target Markdown report source file to define the pipeline.\n_targets/: the data store where tar_make() and similar functions write target storage and metadata when they run the pipeline.\n_targets.R: the target script file. All targets pipelines must have a target script file that returns a target list at the end. If you use Target Markdown (e.g. index.Rmd above) then the target script will be written automatically. Otherwise, you may write it by hand. Unless you apply the custom configuration described later in this chapter, the target script file will always be called _targets.R and live at the project root folder.\n_targets.yaml: a YAML file to set default arguments to critical functions like tar_make(). As described below, you can access and modify this file with functions tar_config_get(), tar_config_set(), and tar_config_unset(). targets will attempt to look for _targets.yaml unless you set a different path in the TAR_CONFIG environment variable.\nR/: directory of scripts containing custom user-defined R code. Most of the code will likely contain custom functions you write to support your targets. You can load these functions with source(\"R/function_script.R\") or eval(parse(text = \"R/function_script.R\"), either in a tar_globals = TRUE code chunk in Target Markdown or directly in _targets.R if you are not using Target Markdown.\ndata/: directory of local input data files. As described in the files chapter, it is good practice to track input files using format = \"file\" in tar_target() and then reference those file targets in downstream targets that directly depend on those files."
  },
  {
    "objectID": "projects.html#multiple-projects",
    "href": "projects.html#multiple-projects",
    "title": "8  Projects",
    "section": "8.3 Multiple projects",
    "text": "8.3 Multiple projects\nIt is generally good practice to give each project its own unique folder with one targets pipeline, one renv library for package management, and one Git/GitHub repository for code version control. However, sometimes it is reasonable to maintain multiple pipelines within a project: for example, if different pipelines have similar research goals and share the same code base of custom user-defined functions. This section explains how to maintain and navigate such a collection of overlapping projects.\nThe functionality below assumes you have targets version 0.7.0.9001 or higher, which you may need to install from GitHub.\n\nremotes::install_github(\"ropensci/targets\")\n\n\n8.3.1 Create each project.\nTo begin, write the shared code base of custom user-defined functions in R/, and write one targets pipeline per project. For convenience, we will directly write to the targets script files, but the principles generalize to Target Markdown. The file structure looks something like this:\n\n├── _targets.yaml\n├── script_a.R\n├── script_b.R\n├── R/\n├──── functions_data.R\n├──── functions_analysis.R\n├──── functions_visualization.R\n...\n\nAll projects share the same functions defined in the scripts in R/, and each project uses a different target script and data store. script_a.R defines the targets for project A.\n\n# script_a.R\nlibrary(targets)\nsource(\"R/functions_data.R\")\nsource(\"R/functions_analysis.R\")\nsource(\"R/functions_visualization.R\")\ntar_option_set(packages = \"tidyverse\")\nlist(\n  tar_target(target_abc, f(..)),\n  tar_target(tarbet_xyz, g(...))\n)\n\nLikewise, script_b.R defines the targets for project B.\n\n# script_b.R\nlibrary(targets)\nsource(\"R/functions_data.R\")\nsource(\"R/functions_analysis.R\")\nsource(\"R/functions_visualization.R\")\ntar_option_set(packages = \"tidyverse\")\nlist(\n  tar_target(target_123, f(...)),\n  tar_target(target_456, h(...))\n)\n\n\n\n8.3.2 Configure each project.\nTo establish a different store and script per project, write a top-level _targets.yaml configuration to specify these paths explicitly. You can do this from R with tar_config_set().\n\ntar_config_set(script = \"script_a.R\", store = \"store_a\", project = \"project_a\")\ntar_config_set(script = \"script_b.R\", store = \"store_b\", project = \"project_b\")\n\nThe R code above writes the following _targets.yaml configuration file.\nproject_a:\n  store: store_a\n  script: script_a.R\nproject_b:\n  store: store_b\n  script: script_b.R\n\n\n8.3.3 Run each project\nTo run each project, run tar_make() with the correct target script and data store. To select the correct script and store, set the TAR_PROJECT environment variable to the correct project name. that way, tar_config_get() automatically supplies the correct script and store arguments to tar_make().\n\nSys.setenv(TAR_PROJECT = \"project_a\")\ntar_make()\ntar_read(target_abc)\nSys.setenv(TAR_PROJECT = \"project_b\")\ntar_make()\ntar_read(target_123)\n\nAlternatively, you can manually select the appropriate script and store for each project. This is a less convenient approach, but if you do it, you do not need to set the TAR_PROJECT environment variable or rely on _targets.yaml.\n\ntar_make(script = \"script_a.R\", store = \"store_a\")\ntar_read(target_abc, sctore = \"store_a\")\ntar_make(script = \"script_b.R\", store = \"store_b\")\ntar_read(target_abc, sctore = \"store_b\")"
  },
  {
    "objectID": "projects.html#interdependent-projects",
    "href": "projects.html#interdependent-projects",
    "title": "8  Projects",
    "section": "8.4 Interdependent projects",
    "text": "8.4 Interdependent projects\n\n8.4.1 Config inheritance\n_targets.yaml can control more than just the script and store, and different projects can inherit settings from one another. In the following example, project B inherits from project A, so projects A and B both set reporter = \"summary\" and shorcut = TRUE by default in tar_make().\n\ntar_config_set(\n  script = \"script_a.R\",\n  store = \"store_a\",\n  reporter_make = \"summary\",\n  shortcut = TRUE,\n  project = \"project_a\"\n)\ntar_config_set(\n  script = \"script_b.R\",\n  store = \"store_b\",\n  inherits = \"project_a\",\n  project = \"project_b\",\n)\n\n\nwriteLines(readLines(\"_targets.yaml\"))\n#&gt; project_a:\n#&gt;   reporter_make: summary\n#&gt;   script: script_a.R\n#&gt;   shortcut: yes\n#&gt;   store: store_a\n#&gt; project_b:\n#&gt;   inherits: project_a\n#&gt;   script: script_b.R\n#&gt;   store: store_b\nSys.setenv(TAR_PROJECT = \"project_b\")\ntar_config_get(\"script\")\n#&gt; [1] \"script_b.R\"\ntar_config_get(\"reporter_make\")\n#&gt; [1] \"summary\"\ntar_config_get(\"shortcut\")\n#&gt; [1] TRUE\n\n\n\n8.4.2 Sharing targets\nFor some workflows, the output of one project serves as the input to another project. The easiest way to set this up is through global objects. The first project remains unchanged, and the second project reads from the first before the pipeline begins.\n\n# script_b.R\nlibrary(targets)\nsource(\"R/functions_data.R\")\nsource(\"R/functions_analysis.R\")\nsource(\"R/functions_visualization.R\")\ntar_option_set(packages = \"tidyverse\")\n\nobject_from_project_a &lt;- tar_read(target_from_project_a, store = \"store_a\")\n\nlist(\n  tar_target(new_target, some_function(object_from_project_a)),\n  ...\n)\n\nThis approach is the most convenient and versatile, but it can be inefficient if target_from_project_a is large. A higher-performant solution for large data is to treat the file in project A’s data store as an input file target in project B. This second approach requires an understanding of the data store and an awareness of which targets are stored locally and which are stored on the cloud. For a target with repository = \"local\", you can begin from the file store_a/objects/target_from_project_a. Otherwise, the target’s file exists on the cloud (AWS or GCP) and you may need to access the target as a URL in a target with format = \"url\".\n\n# script_b.R\nlibrary(targets)\nsource(\"R/functions_data.R\")\nsource(\"R/functions_analysis.R\")\nsource(\"R/functions_visualization.R\")\ntar_option_set(packages = \"tidyverse\")\nlist(\n  tar_target(file_from_project_a, \"store_a/objects/target_name\", format = \"file\"),\n  tar_target(data_from_project_a, readRDS(file_from_project_a)), # Assumes format = \"rds\" in project A.\n  tar_target(new_target, analyze_data(data_from_project_a)),\n  ...\n)"
  },
  {
    "objectID": "projects.html#the-config-package",
    "href": "projects.html#the-config-package",
    "title": "8  Projects",
    "section": "8.5 The config package",
    "text": "8.5 The config package\nThe _targets.yaml config interface borrows heavily from the ideas in the config R package. However, it does not actually use the config package, nor does it copy or use the config source code in any way. And there are major differences in user-side behavior:\n\nThere is no requirement to have a configuration (i.e. project) named “default”.\nThe default project is called “main”, and other projects do not inherit from it automatically.\nNot all fields need to be populated in _targets.yaml because the targets package already has system defaults."
  },
  {
    "objectID": "projects.html#footnotes",
    "href": "projects.html#footnotes",
    "title": "8  Projects",
    "section": "",
    "text": "However, you may wish to commit _targets/meta/meta, which is critical to checking the status of each target and reading targets into memory.↩︎"
  },
  {
    "objectID": "data.html#local-data-store",
    "href": "data.html#local-data-store",
    "title": "9  Data",
    "section": "9.1 Local data store",
    "text": "9.1 Local data store\ntar_make() creates a special data folder called _targets/ at the root of your project.\n\nfs::dir_tree(\"_targets\")\n_targets\n├── meta\n│   ├── crew\n│   ├── meta\n│   ├── process\n│   └── progress\n├── objects\n│   ├── target1\n│   ├── target2\n│   ├── dynamic_branch_c7bcb4bd\n│   ├── dynamic_branch_285fb6a9\n│   └── dynamic_branch_874ca381\n├── scratch # tar_make() deletes this folder after it finishes.\n└── user # gittargets users can put custom files here for data version control.\n\nThe two most important parts are:\n\n_targets/meta/meta: a text file with critical metadata.\n_targets/objects/: a folder with the output of each target.\n\nConsider this pipeline:\n\nlibrary(targets)\nlist(\n  tar_target(\n    name = target1,\n    command = 11 + 46,\n    format = \"rds\",\n    repository = \"local\"\n  )\n)\n\ntar_make() does the following:\n\nRun the command of target1 and observe a return value of 57.\nSave the value 57 to _targets/objects/target1 using saveRDS().\nAppend a line to _targets/meta/meta containing the hash, time stamp, file size, warnings, errors, and execution time of target1.\nAppend a line to _targets/meta/progress to indicate that target1 finished.\n\nRemarks:\n\nTo read the value of target1 back into R, tar_read(target1) is much better than readRDS(\"_targets/objects/target1\").\nThe format argument of tar_target() controls how tar_make() saves the return value. The default is \"rds\", and there are more efficient formats such as \"qs\" and \"feather\". Some of these formats require external packages. See https://docs.ropensci.org/targets/reference/tar_target.html#storage-formats for details.\nFor efficiency, tar_make() does not write to _targets/meta/meta or _targets/meta/progress every single time a target completes. Instead, it waits and gathers a backlog of text lines in memory, then writes whole batches of lines at a time. This behavior risks losing metadata in the event of a crash, but it minimizes costly interactions with the file system. The seconds_meta argument controls how often tar_make() writes metadata. seconds_reporter does the same for messages printed to the R console."
  },
  {
    "objectID": "data.html#external-files",
    "href": "data.html#external-files",
    "title": "9  Data",
    "section": "9.2 External files",
    "text": "9.2 External files\nIf your pipeline loads a preexisting data file or creates files outside the data store, it is good practice to watch them for changes. That way, tar_make() will automatically rerun the appropriate targets if these files change. To watch one of more files, create a target that\n\nHas format = \"file\" in tar_target(), and\nReturns a character vector of local files and/or directories.\n\nThe example sketch of a pipeline below follows this pattern.\n\n# _targets.R\nlibrary(targets)\ncreate_output &lt;- function(file) {\n  data &lt;- read.csv(file)\n  output &lt;- head(data)\n  write.csv(output, \"output.csv\")\n  \"output.csv\"\n}\nlist(\n  tar_target(name = input, command = \"data.csv\", format = \"file\"),\n  tar_target(name = output, command = create_output(input), format = \"file\")\n)\n\nWe assume a file called data.csv exists prior to running the pipeline. When tar_make() runs the first time, target input runs and returns the value \"data.csv\". Because format is \"file\", no extra file is saved to _targets/meta/objects/. Instead, \"data.csv\" gets hashed, and the hash is stored in the metadata. Then, target output runs, creates the file \"output.csv\", and that file gets processed the same way.\nTarget output depends on target input because the command of target output mentions the symbol input. (Verify with tar_visnetwork().) That way, output does not run until input is finished, and output reruns if the hash of input changes. It is good practice to write target symbols instead of literal input paths to ensure the proper dependency relationships. In this case, if output were written with the literal input path as tar_target(name = output, command = create_output(\"data.csv\"), format = \"file\"), then the dependency relationship would break, and output would not rerun if input changed.\nThe mechanism of format = \"file\" applies equally to input files and output files. In fact, a target can track both input and output files at the same time. This is part of how tar_render() works. As discussed in the R Markdown chapter, tar_render() takes an R Markdown source file as input, write a rendered report file as output, and returns a character vector with the paths to both files."
  },
  {
    "objectID": "data.html#memory",
    "href": "data.html#memory",
    "title": "9  Data",
    "section": "9.3 Memory",
    "text": "9.3 Memory\nA typical target has dependencies upstream. In order to run properly, it needs the return values of those dependencies to exist in the random access memory (RAM). By default, tar_make() reads those dependency targets from the data store, and it keeps in memory those targets and any targets that run. For big data workflows where not all data can fit into RAM, it is wiser to set memory = \"transient\" and garbage_collection = TRUE in tar_target() (and tar_option_set()). That way, the target return value is removed from memory at the earliest opportunity. The next time the target value is needed, it is reread from storage again, and then removed from memory as soon as possible. Reading a big dataset from storage can take time, which may slow down some pipelines, but it may be worth the extra time to make sure memory usage stays within reasonable limits. It is also worth considering format = \"file\" in tar_target() so the file is hashed but not loaded into memory and downstream targets can read only small subsets of the data in the file. See the performance chapter for more details."
  },
  {
    "objectID": "data.html#cleaning-up-local-internal-data-files",
    "href": "data.html#cleaning-up-local-internal-data-files",
    "title": "9  Data",
    "section": "9.4 Cleaning up local internal data files",
    "text": "9.4 Cleaning up local internal data files\nThere are multiple functions to remove or clean up target storage. Most of these functions delete internal files or records from the data store and delete objects from cloud buckets. They do not delete local external files (i.e. tar_target(..., format = \"file\", repository = \"local\")) because some of those files could be local input data that exists prior to tar_make().\n\ntar_destroy() is by far the most commonly used cleaning function. It removes the _targets/ folder (or optionally a subfolder in _targets/) and all the cloud targets mentioned in the metadata. Use it if you intend to start the pipeline from scratch without any trace of a previous run.\ntar_prune() deletes the data and metadata of all the targets no longer present in your current target script file (default: _targets.R). This is useful if you recently worked through multiple changes to your project and are now trying to discard irrelevant data while keeping the results that still matter.\ntar_delete() is more selective than tar_destroy() and tar_prune(). It removes the individual data files of a given set of targets from _targets/objects/ and cloud buckets while leaving the metadata in _targets/meta/meta alone. If you have a small number of data-heavy targets you need to discard to conserve storage, this function can help.\ntar_invalidate() is the complement of tar_delete(): for the selected targets, it deletes the metadata in _targets/meta/meta and does not delete the return values. After invalidation, you will still be able to locate the data files with tar_path() and manually salvage them in an emergency. However, tar_load() and tar_read() will not be able to read the data into R, and subsequent calls to tar_make() will attempt to rebuild those targets.\ntar_meta_delete() removes all the files in _targets/meta/ that targets created, not just _targets/meta/meta, but also _targets/meta/progress, _targets/meta/process, and _targets/meta/crew. It also deletes the copies of these files in cloud buckets. See the cloud storage chapter for details."
  },
  {
    "objectID": "cloud-storage.html#footnotes",
    "href": "cloud-storage.html#footnotes",
    "title": "10  Cloud storage",
    "section": "",
    "text": "GCP has safety capabilities such as discarding all but the newest n versions.↩︎"
  },
  {
    "objectID": "literate-programming.html#scope",
    "href": "literate-programming.html#scope",
    "title": "11  Literate programming",
    "section": "11.1 Scope",
    "text": "11.1 Scope\nThere are two kinds of literate programming in targets:\n\nA literate programming source document (or Quarto project) that renders inside an individual target. Here, you define a special kind of target that runs a lightweight R Markdown report which depends on upstream targets.\nTarget Markdown, an overarching system in which one or more Quarto or R Markdown files write the _targets.R file and encapsulate the pipeline.\n\nWe recommend (1) in order to fully embrace pipelines as a paradigm, and that is where this chapter will focus. However, (2) is still supported, and we include it in an appendix."
  },
  {
    "objectID": "literate-programming.html#r-markdown-targets",
    "href": "literate-programming.html#r-markdown-targets",
    "title": "11  Literate programming",
    "section": "11.2 R Markdown targets",
    "text": "11.2 R Markdown targets\nHere, literate programming serves to display, summarize, and annotate results from upstream in the targets pipeline. The document(s) have little to no computation of their own, and they make heavy use of tar_read() and tar_load() to leverage output from other targets.\nAs an example, let us extend the walkthrough example chapter with the following R Markdown source file report.Rmd.\n\nThis document depends on targets fit and hist. If we previously ran the pipeline and the data store _targets/ exists, then tar_read() and tar_load() will read those targets and show them in the rendered HTML output report.html.\n\nWith the tar_render() function in tarchetypes, we can go a step further and include report.Rmd as a target in the pipeline. This new targets re-renders report.Rmd whenever fit or hist changes, which means tar_make() brings the output file report.html up to date.\n\nlibrary(tarchetypes)\ntarget &lt;- tar_render(report, \"report.Rmd\") # Just defines a target object.\ntarget$command$expr[[1]]\n#&gt; tarchetypes::tar_render_run(path = \"report.Rmd\", args = list(input = \"report.Rmd\", \n#&gt;     knit_root_dir = getwd(), quiet = TRUE), deps = list(fit, \n#&gt;     hist))\n\ntar_render() is like tar_target(), except that you supply the file path to the R Markdown report instead of an R command. Here it is at the bottom of the example _targets.R file below:\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\nsource(\"R/functions.R\")\nlist(\n  tar_target(\n    raw_data_file,\n    \"data/raw_data.csv\",\n    format = \"file\"\n  ),\n  tar_target(\n    raw_data,\n    read_csv(raw_data_file, col_types = cols())\n  ),\n  tar_target(\n    data,\n    raw_data %&gt;%\n      mutate(Ozone = replace_na(Ozone, mean(Ozone, na.rm = TRUE)))\n  ),\n  tar_target(hist, create_plot(data)),\n  tar_target(fit, biglm(Ozone ~ Wind + Temp, data)),\n  tar_render(report, \"report.Rmd\") # Here is our call to tar_render().\n)\n\nWhen we visualize the pipeline, we see that our report target depends on targets fit and hist. tar_render() automatically detects these upstream dependencies by statically analyzing report.Rmd for calls to tar_load() and tar_read().\n\n# R console\ntar_visnetwork()"
  },
  {
    "objectID": "literate-programming.html#quarto-targets",
    "href": "literate-programming.html#quarto-targets",
    "title": "11  Literate programming",
    "section": "11.3 Quarto targets",
    "text": "11.3 Quarto targets\ntarchetypes &gt;= 0.6.0.9000 supports a tar_quarto() function, which is like tar_render(), but for Quarto. For an individual source document, tar_quarto() works exactly the same way as tar_render(). However, tar_quarto() is more powerful: you can supply the path to an entire Quarto project, such as a book, blog, or website. tar_quarto() looks for target dependencies in all the source documents (e.g. listed in _quarto.yml), and it tracks the important files in the project for changes (run tar_quarto_files() to see which ones)."
  },
  {
    "objectID": "literate-programming.html#parameterized-documents",
    "href": "literate-programming.html#parameterized-documents",
    "title": "11  Literate programming",
    "section": "11.4 Parameterized documents",
    "text": "11.4 Parameterized documents\ntarchetypes functions make it straightforward to use parameterized R Markdown and parameterized Quarto in a targets pipeline. The next two subsections walk through the major use cases."
  },
  {
    "objectID": "literate-programming.html#single-parameter-set",
    "href": "literate-programming.html#single-parameter-set",
    "title": "11  Literate programming",
    "section": "11.5 Single parameter set",
    "text": "11.5 Single parameter set\nIn this scenario, the pipeline renders your parameterized report one time using a single set of parameters. These parameters can be upstream targets, global objects, or fixed values. Simply pass a params argument to tar_render() or an execute_params argument to tar_quarto(). Example:\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\nlist(\n  tar_target(data, data.frame(x = seq_len(26), y = letters))\n  tar_quarto(report, \"report.qmd\", execute_params = list(your_param = data))\n)\n\nInternally, the report target runs:\n\n# R console\nquarto::quarto_render(\"report.qmd\", params = list(your_param = your_target))\n\nwhere report.qmd looks like this:\n\nSee tar_quarto() examples and tar_render() examples for more."
  },
  {
    "objectID": "literate-programming.html#multiple-parameter-sets",
    "href": "literate-programming.html#multiple-parameter-sets",
    "title": "11  Literate programming",
    "section": "11.6 Multiple parameter sets",
    "text": "11.6 Multiple parameter sets\nIn this scenario, you still have a single report, but you render it multiple times over a grid of parameters. This time, use tar_quarto_rep() or tar_render_rep(). Each of these functions takes as input a grid of parameters with one column per parameter and one row per parameter set, where each parameter set is used to render an instance of the document. In other words, the number of rows in the parameter grid is the number of output documents you will produce. Below is an example _targets.R file using tar_render_rep(). Usage with tar_quarto_rep() is the same1.\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\ntar_option_set(packages = \"tibble\")\nlist(\n  tar_target(x, \"value_of_x\"),\n  tar_render_rep(\n    report,\n    \"report.Rmd\",\n    params = tibble(\n      par = c(\"par_val_1\", \"par_val_2\", \"par_val_3\", \"par_val_4\"),\n      output_file = c(\"f1.html\", \"f2.html\", \"f3.html\", \"f4.html\")\n    ),\n    batches = 2\n  )\n)\n\nwhere report.Rmd has the following YAML front matter:\ntitle: report\noutput_format: html_document\nparams:\n  par: \"default value\"\nand the following R code chunk:\n\nprint(params$par)\nprint(tar_read(x))\n\ntar_render_rep() creates a target for the parameter grid and uses dynamic branching to render the output reports in batches. In this case, we have two batches (dynamic branches) that each produce two reports (four output reports total).\n\n# R console\ntar_make()\n#&gt; ● run target x\n#&gt; ● run target report_params\n#&gt; ● run branch report_9e7470a1\n#&gt; ● run branch report_457829de\n#&gt; ● end pipeline\n\nThe third output file f3.html is below, and the rest look similar.\n\nFor more information, see these examples."
  },
  {
    "objectID": "literate-programming.html#footnotes",
    "href": "literate-programming.html#footnotes",
    "title": "11  Literate programming",
    "section": "",
    "text": "except the parameter grid argument is called execute_params in tar_quarto_rep().↩︎"
  },
  {
    "objectID": "crew.html#how-it-works",
    "href": "crew.html#how-it-works",
    "title": "12  Distributed computing",
    "section": "12.1 How it works",
    "text": "12.1 How it works\n\nWrite your pipeline as usual, but set the controller argument of tar_option_set to the crew controller of your choice.\nRun the pipeline with a simple tar_make().\n\nThe crew controller from (1) allows tar_make() to launch external R processes called “workers” which can each run one or more targets. By delegating long-running targets to these workers, the local R session is free to focus on other tasks, and the pipeline finishes faster."
  },
  {
    "objectID": "crew.html#example",
    "href": "crew.html#example",
    "title": "12  Distributed computing",
    "section": "12.2 Example",
    "text": "12.2 Example\nThe following _targets.R file uses a local process controller with 2 workers. That means up to 2 workers can be running at any given time, and each worker is an separate R process on the same computer as the local R process.\n\n# _targets.R\nlibrary(targets)\nlibrary(crew)\ntar_option_set(\n  controller = crew_controller_local(workers = 2)\n)\ntar_source()\nlist(\n  tar_target(name = data, command = get_data()),\n  tar_target(name = model1, command = run_model1(data)),\n  tar_target(name = model2, command = run_model2(data)),\n  tar_target(name = model3, command = run_model3(data)),\n  tar_target(name = plot1, command = plot_model(model1)),\n  tar_target(name = plot2, command = plot_model(model2)),\n  tar_target(name = plot3, command = plot_model(model3))\n)\n\n\n# R console\ntar_visnetwork(targets_only = TRUE)\n\n\n\n\n\nRun the pipeline with a simple call to tar_make(). Please note that real-life pipelines will have longer execution times, especially for the models.\n\n# R console\ntar_make()\n\n\n#&gt; ▶ start target data\n#&gt; ● built target data [0.001 seconds]\n#&gt; ▶ start target model1\n#&gt; ● built target model1 [0 seconds]\n#&gt; ▶ start target model2\n#&gt; ● built target model2 [0 seconds]\n#&gt; ▶ start target model3\n#&gt; ● built target model3 [0 seconds]\n#&gt; ▶ start target plot1\n#&gt; ● built target plot1 [0.001 seconds]\n#&gt; ▶ start target plot2\n#&gt; ● built target plot2 [0.001 seconds]\n#&gt; ▶ start target plot3\n#&gt; ● built target plot3 [0 seconds]\n#&gt; ▶ end pipeline [0.102 seconds]\n\nLet’s talk through what happens in the above call to tar_make(). First, a new worker launches and sends the data target to the crew queue. After the data target completes, all three models are ready to begin. A second worker automatically launches to meet the increased demand of the workload, and each of the two workers starts to run a model. After one of the models finishes, its worker is free to either run the downstream plot or the third model. The process continues until all the targets are complete. The workers shut down when the pipeline is done."
  },
  {
    "objectID": "crew.html#configuration-and-auto-scaling",
    "href": "crew.html#configuration-and-auto-scaling",
    "title": "12  Distributed computing",
    "section": "12.3 Configuration and auto-scaling",
    "text": "12.3 Configuration and auto-scaling\nAdding more workers might speed up your pipeline, but not always. Beyond a certain point, the efficiency gains will diminish, and the extra workers will have nothing to do. With proper configuration, you can find the right balance.\nAs mentioned above, new workers launch automatically in response to increasing demand. By default, they stay running for the duration of the pipeline. However, you can customize the controller to scale down when circumstances allow, which helps help avoid wasting resources1 The most useful arguments for down-scaling, in order of importance, are:\n\nseconds_idle: automatically shut down a worker if it spends too long waiting for a target.\ntasks_max: maximum number of tasks a worker can run before shutting down.\nseconds_wall: soft wall time of a worker.\n\nOn the other hand, it is not always helpful to eagerly down-scale workers. Because the workload can fluctuate rapidly, some workers may quit and relaunch so often that it creates noticeable overhead.\nFortunately, it is straightforward to explore auto-scaling and configuration issues empirically. Simply run your existing configuration with tar_make() and then look at the output from tar_crew(). For example, consider the following pipeline with 1001 quick targets, 10 workers, and a maximum idle time of 3 seconds.\n\n# _targets.R file\n\nlibrary(targets)\ncontroller &lt;- crew::crew_controller_local(\n  name = \"my_controller\",\n  workers = 10,\n  seconds_idle = 3\n)\ntar_option_set(controller = controller)\nlist(\n  tar_target(x, seq_len(1000)),\n  tar_target(y, x, pattern = map(x))\n)\n\nAfter running tar_make(), tar_crew() shows the following worker metadata:\n\ntar_crew()\n#&gt; # A tibble: 10 × 5\n#&gt;    controller    worker launches seconds targets\n#&gt;    &lt;chr&gt;          &lt;int&gt;    &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;\n#&gt;  1 my_controller      1        1   1.77      998\n#&gt;  2 my_controller      2        4   0.076       3\n#&gt;  3 my_controller      3        1   0           0\n#&gt;  4 my_controller      4        0   0           0\n#&gt;  5 my_controller      5        0   0           0\n#&gt;  6 my_controller      6        0   0           0\n#&gt;  7 my_controller      7        0   0           0\n#&gt;  8 my_controller      8        0   0           0\n#&gt;  9 my_controller      9        0   0           0\n#&gt; 10 my_controller     10        0   0           0\n\nThe first worker did most of the work, and the second worker ran only 3 targets. Both the second and third workers launched and self-terminated more often than they ran targets. In fact, the third worker did not run any targets at all. None of the other workers actually launched. For this pipeline, it would be better to not use crew at all, or set deployment = \"main\" in tar_target() for the targets that will complete instantly. And if 2 workers were truly busy instead of just 1, it would be reasonable to set workers = 2 and pick a much higher value of seconds_idle\nBut now, suppose the targets in the pipeline take longer to run:\n\n# _targets.R file:\nlibrary(targets)\ncontroller &lt;- crew::crew_controller_local(\n  name = \"my_controller\",\n  workers = 10,\n  seconds_idle = 3\n)\ntar_option_set(controller = controller)\nlist(\n  tar_target(x, seq_len(1000)),\n  tar_target(y, Sys.sleep(1), pattern = map(x)) # Run for 1 second.\n)\n\nThe tar_crew() worker metadata is far more sensible: each worker launched once and accomplished a lot. And because seconds_idle was set to 3, we know each worker instance wasted no more than 3 seconds waiting for new targets to run. As long as resources allow, it is appropriate to have workers = 10 and seconds_idle = 3 for this pipeline: this configuration speeds up the pipeline while avoiding wasted resources.\n\ntar_crew()\n#&gt; # A tibble: 10 × 5\n#&gt;    controller    worker launches seconds targets\n#&gt;    &lt;chr&gt;          &lt;int&gt;    &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;\n#&gt;  1 my_controller      1        1   103.      104\n#&gt;  2 my_controller      2        1   100.      100\n#&gt;  3 my_controller      3        1   100.      100\n#&gt;  4 my_controller      4        1   100.      100\n#&gt;  5 my_controller      5        1   100.      100\n#&gt;  6 my_controller      6        1   100.      100\n#&gt;  7 my_controller      7        1    99.4      99\n#&gt;  8 my_controller      8        1   100.      100\n#&gt;  9 my_controller      9        1    99.4      99\n#&gt; 10 my_controller     10        1    99.4      99"
  },
  {
    "objectID": "crew.html#backends",
    "href": "crew.html#backends",
    "title": "12  Distributed computing",
    "section": "12.4 Backends",
    "text": "12.4 Backends\ncrew is a platform for multiple computing platforms, not just local processes, but also traditional high-performance computing systems and cloud computing services. For example, to run each worker as a job on a Sun Grid Engine cluster, use crew_controller_sge() from the crew.cluster package.\n\n# _targets.R\nlibrary(targets)\nlibrary(crew.cluster)\ntar_option_set(\n  controller = crew_controller_sge(\n    workers = 3,\n    script_lines = \"module load R\",\n    sge_log_output = \"log_folder/\"\n  )\n)\ntar_source()\nlist(\n  tar_target(name = data, command = get_data()),\n  tar_target(name = model1, command = run_model1(data)),\n  tar_target(name = model2, command = run_model2(data)),\n  tar_target(name = model3, command = run_model3(data)),\n  tar_target(name = plot1, command = plot_model(model1)),\n  tar_target(name = plot2, command = plot_model(model2)),\n  tar_target(name = plot3, command = plot_model(model3))\n)\n\nIf crew.cluster and other official packages do not meet your needs, then you can write your own launcher plugin tailored to your own specific computing environment. crew makes this process straightforward, and the vignette at https://wlandau.github.io/crew/articles/launcher_plugins.html walks through the details step by step."
  },
  {
    "objectID": "crew.html#heterogeneous-workers",
    "href": "crew.html#heterogeneous-workers",
    "title": "12  Distributed computing",
    "section": "12.5 Heterogeneous workers",
    "text": "12.5 Heterogeneous workers\nDifferent targets may have different computing requirements, from memory to GPUs and beyond. You can send different targets to different kinds of workers using crew controller groups. In the _targets.R file below, we create a local process controller alongside a Sun Grid Engine controller a memory requirement and a GPU. We combine them in a crew controller group which we supply to the controller argument of tar_option_set. Next, we use tar_resources() and tar_resources_crew() to tell model2 to run on Sun Grid Engine and all other targets to run on local processes. The deployment = \"main\" argument tells the plots to avoid worker processes altogether and run on the main central R process.\n\n# _targets.R\nlibrary(targets)\nlibrary(crew)\nlibrary(crew.cluster)\ncontroller_local &lt;- crew_controller_local(\n  name = \"my_local_controller\",\n  workers = 2,\n  seconds_idle = 10\n)\ncontroller_sge &lt;- crew_controller_sge(\n  name = \"my_sge_controller\",\n  workers = 3,\n  seconds_idle = 15,\n  script_lines = \"module load R\",\n  sge_log_output = \"log_folder/\",\n  sge_memory_gigabytes_required = 64,\n  sge_gpu = 1\n)\ntar_option_set(\n  controller = crew_controller_group(controller_local, controller_sge),\n  resources = tar_resources(\n    crew = tar_resources_crew(controller = \"my_local_controller\")\n  )\n)\ntar_source()\nlist(\n  tar_target(name = data, command = get_data()),\n  tar_target(name = model1, command = run_model1(data)),\n  tar_target(\n    name = model2,\n    command = run_model2(data),\n    resources = tar_resources(\n      crew = tar_resources_crew(controller = \"my_sge_controller\")\n    )\n  ),\n  tar_target(name = model3, run_model3(data)),\n  tar_target(name = plot1, command = plot_model(model1), deployment = \"main\"),\n  tar_target(name = plot2, command = plot_model(model2), deployment = \"main\"),\n  tar_target(name = plot3, command = plot_model(model3), deployment = \"main\")\n)"
  },
  {
    "objectID": "crew.html#thanks",
    "href": "crew.html#thanks",
    "title": "12  Distributed computing",
    "section": "12.6 Thanks",
    "text": "12.6 Thanks\nThe crew package is an extension of mirai, a sleek and sophisticated task scheduler that efficiently processes intense workloads. crew is only possible because of the amazing work by Charlie Gao in packages mirai and nanonext."
  },
  {
    "objectID": "crew.html#footnotes",
    "href": "crew.html#footnotes",
    "title": "12  Distributed computing",
    "section": "",
    "text": "Automatic down-scaling also helps comply with wall time restrictions on shared computing clusters. See the arguments of crew_controller_local() for details.↩︎"
  },
  {
    "objectID": "performance.html#data-location",
    "href": "performance.html#data-location",
    "title": "13  Performance",
    "section": "13.1 Data location",
    "text": "13.1 Data location\nThe data store is a folder on a computer, usually at the root of your project, and targets makes innumerable quick modifications over the course of a pipeline. For best performance, the data store should live on high-performant storage hardware on your local computer. Any slowdown due to disk issues or latency due to a slow network will severely impact the performance of your pipeline.1"
  },
  {
    "objectID": "performance.html#efficient-storage-formats",
    "href": "performance.html#efficient-storage-formats",
    "title": "13  Performance",
    "section": "13.2 Efficient storage formats",
    "text": "13.2 Efficient storage formats\nThe default data storage format is RDS, which can be slow and bulky for large data. For large data pipelines, consider alternative formats to more efficiently store and manage your data. Set the storage format using tar_option_set() or tar_target():\n\ntar_option_set(format = \"qs\")\n\nSome formats such as \"qs\" work on all kinds of data, whereas others like \"feather\" works only on data frames. Most non-default formats store the data faster and in smaller files than the default \"rds\" format, but they require extra packages to be installed. For example, format = \"qs\" requires the qs package, and format = \"feather\" requires the arrow package.\nFor extremely large datasets that cannot fit into memory, consider format = \"file\" to treat the data as a file on disk. Downstream targets are free to load only the subsets of the data they need."
  },
  {
    "objectID": "performance.html#memory",
    "href": "performance.html#memory",
    "title": "13  Performance",
    "section": "13.3 Memory",
    "text": "13.3 Memory\nBy default, the pipeline retains targets in memory while it is running. In large data workloads, this could consume too much computer memory and overwhelm the worker processes there the targets run. The solution is simple: in tar_option_set() or tar_target() in the _targets.R file, activate transient memory and garbage collection:\n\ntar_option_set(memory = \"transient\", garbage_collection = TRUE)\n\nAnd for pipelines that store and retrieve data on the local R process, you can activate garbage collection in the local controller process. (Requires targets &gt;= 1.1.0.)\n\ntar_make(garbage_collection = TRUE)\n\n\n\n\n\n\n\nAbout memory and garbage collection\n\n\n\n\n\nmemory = \"transient\" tells targets to remove data from the R environment as soon as possible. However, the computer memory itself is not freed until garbage collection is run. Alternatively, can invoke garbage collection manually using gc().2 For both transient memory and garbage collection, the cleanup phase happens once per target.\nAs with everything performance-related, there is a cost. With transient memory and garbage collection, the pipeline reads data from storage far more often. These data reads take additional time, and if you use cloud storage, they could incur additional monetary charges. In addition, garbage collection is usually a slow operation, and repeated garbage collections could slow down a pipeline with thousands of targets. Please think about the tradeoffs for your specific use case.\nAnd as mentioned previously, format = \"file\" and format = \"file_fast\" treat a target as a file path, and the data in the file is not automatically loaded into memory. This may be useful for larger-than-memory files. Downstream targets are free to load only strategic subsets of the data file."
  },
  {
    "objectID": "performance.html#cloud-storage-latency",
    "href": "performance.html#cloud-storage-latency",
    "title": "13  Performance",
    "section": "13.4 Cloud storage latency",
    "text": "13.4 Cloud storage latency\ntargets provides optional cloud storage through the repository and resources arguments of tar_target() and tar_option_set(). By default, to check if a target is up to date on the cloud, the local R process downloads the metadata of the target object in the bucket. For a large number of cloud targets, this can create high latency and unwanted monetary costs due to interactions with the web API of Amazon or Google. If you trust the bucket to safely keep your data, and if you know you will never call tar_delete() or modify that data manually, then you can avoid these costs with cue = tar_cue(file = FALSE) in tar_target() and/or tar_option_set()."
  },
  {
    "objectID": "performance.html#hashes",
    "href": "performance.html#hashes",
    "title": "13  Performance",
    "section": "13.5 Hashes",
    "text": "13.5 Hashes\ntargets uses hash computations to check if each target is up to date, and hashes can be slow. To enable timestamps to speed up the processing of local data store files in _targets/objects/, set trust_object_timestamps to TRUE in tar_option_set() (already the default). To enable timestamps to speed up the processing of large or numerous external files, set format = \"file_fast\" instead of format = \"file\" in tar_option_set(). (Requires targets &gt;= 1.1.0.)\n\n\n\n\n\n\nDangers of timestamps\n\n\n\nWhere timestamps are used, do not manually change those files while the pipeline is running. _targets/objects/ in particular should never be modified by hand. And if you have on file system with low-precision time stamps (EXT3, FAT, XFS) wait at least 2 seconds after the pipeline finishes.\n\n\n\n\n\n\n\n\nAbout hashes and timestamps\n\n\n\n\n\nA hash is a fixed-length fingerprint of an object or file. Except in rare cases, different files have different hashes, and two files with the same hash have the same contents. targets uses hashes to check if files have changed, which helps decide whether to rerun or skip each target. Unfortunately, hashes are expensive to compute, so a large number of targets or a large data file could slow down your pipeline.\nFile modification timestamps offer a workaround. Operating systems keep track of when each file was last modified, and R functions file.mtime() and file.info() can look up these timestamps much faster than hashes can be computed. When you tell targets to use timestamps, the package compares the current timestamp to the old timestamp from when the pipeline last ran. If the timestamps agree, then targets assumes the file is up to date and does not bother to recompute the hash. Otherwise, if the timestamps disagree, then targets recomputes the hash to find out if the contents of the file have really changed. When used safely, this behavior speeds up tar_make(), tar_outdated(), tar_visnetwork(), etc. by avoiding superfluous hash computations when targets are up to date."
  },
  {
    "objectID": "performance.html#parallel-workers-and-data",
    "href": "performance.html#parallel-workers-and-data",
    "title": "13  Performance",
    "section": "13.6 Parallel workers and data",
    "text": "13.6 Parallel workers and data\nBy default, the main controlling R process stores and retrieves the data. So in large parallel data pipelines, tar_make_clustermq() and tar_make_future() may bottleneck at the data management phase. Solution: if all parallel workers have access to the local data store, you can make those workers store and retrieve the data instead of putting it all on the main controlling R process. In tar_target() or tar_option_set() in the _targets.R file, activate worker storage and retrieval:\n\ntar_option_set(storage = \"worker\", retrieval = \"worker\")\n\nIf the workers do not have access to the local data store, you can still set storage = \"worker\" and retrieval = \"worker\" if you use cloud storage to store and retrieve your data."
  },
  {
    "objectID": "performance.html#local-targets",
    "href": "performance.html#local-targets",
    "title": "13  Performance",
    "section": "13.7 Local targets",
    "text": "13.7 Local targets\nIn tar_make_clustermq(), the persistent workers launch as soon as a target needs them, and they keep running until no more targets need them anymore. In addition, tar_make_future() submits a new job for every target that needs one. Both behaviors could waste computational resources. For targets that run quickly and cheaply, consider setting deployment = \"main\" in tar_target():\n\ntar_target(dataset, get_dataset(), deployment = \"main\")\ntar_target(summary, compute_summary_statistics(), deployment = \"main\")\n\ndeployment = \"main\" says to run the target on the main controlling process instead of a parallel worker. If the target is upstream, then deployment = \"main\" avoids launching persistent workers too early. If the target is downstream, deployment = \"main\" allows persistent workers to safely shut down earlier. In the case of transient workers, deployment = \"main\" avoids the overhead and cost of submitting an unnecessary job or background process.\nFor targets that really do need parallel workers, make sure deployment = \"worker\" (default).\n\ntar_target(model, run_machine_learning_model(dataset), deployment = \"worker\")\n\nThe deployment argument of tar_option_set() controls the default deployment argument of subsequent calls to tar_target()."
  },
  {
    "objectID": "performance.html#many-targets",
    "href": "performance.html#many-targets",
    "title": "13  Performance",
    "section": "13.8 Many targets",
    "text": "13.8 Many targets\nA pipeline with too many targets will begin to slow down. You may notice a minor slowdown at about 1000 targets and a more significant one at around 5000 or 10000 targets. This happens because each target needs to check its data, decide whether it needs to rerun, load its upstream dependencies from memory if applicable, and store its data after running. The overhead of these actions adds up.\nTo reduce overhead, consider dividing up the work into a smaller number of targets. Each target is a cached operation, and not all steps of the pipeline needs to be cached at a perfect level of granularity. See the sections on what a target should do and how much a target should do.\n\n\n\n\n\n\nAbout batching\n\n\n\n\n\nSimulation studies and other iterative stochastic pipelines may need to run thousands of independent random replications. For these pipelines, consider batching to reduce the number of targets while preserving the number of replications. In batching, each batch is a dynamic branch target that performs a subset of the replications. For 1000 replications, you might want 40 batches of 25 replications each, 10 batches with 100 replications each, or a different balance depending on the use case. Functions tarchetypes::tar_rep(), tarchetypes::tar_map_rep(), and stantargets::tar_stan_mcmc_rep_summary() are examples of target factories that set up the batching structure without needing to understand dynamic branching."
  },
  {
    "objectID": "performance.html#monitoring-the-pipeline",
    "href": "performance.html#monitoring-the-pipeline",
    "title": "13  Performance",
    "section": "13.9 Monitoring the pipeline",
    "text": "13.9 Monitoring the pipeline\nEven the most efficient targets pipelines can take time to complete because the user-defined tasks themselves are slow. There are convenient ways to monitor the progress of a running pipeline:\n\ntar_poll() continuously refreshes a text summary of runtime progress in the R console. Run it in a new R session at the project root directory. (Only supported in targets version 0.3.1.9000 and higher.)\ntar_visnetwork(), tar_progress_summary(), tar_progress_branches(), and tar_progress() show runtime information at a single moment in time.\ntar_watch() launches an Shiny app that automatically refreshes the graph every few seconds. Try it out in the example below.\n\n\n# Define an example target script file with a slow pipeline.\nlibrary(targets)\ntar_script({\n  sleep_run &lt;- function(...) {\n    Sys.sleep(10)\n  }\n  list(\n    tar_target(settings, sleep_run()),\n    tar_target(data1, sleep_run(settings)),\n    tar_target(data2, sleep_run(settings)),\n    tar_target(data3, sleep_run(settings)),\n    tar_target(model1, sleep_run(data1)),\n    tar_target(model2, sleep_run(data2)),\n    tar_target(model3, sleep_run(data3)),\n    tar_target(figure1, sleep_run(model1)),\n    tar_target(figure2, sleep_run(model2)),\n    tar_target(figure3, sleep_run(model3)),\n    tar_target(conclusions, sleep_run(c(figure1, figure2, figure3)))\n  )\n})\n\n# Launch the app in a background process.\n# You may need to refresh the browser if the app is slow to start.\n# The graph automatically refreshes every 10 seconds\ntar_watch(seconds = 10, outdated = FALSE, targets_only = TRUE)\n\n# Now run the pipeline and watch the graph change.\npx &lt;- tar_make()\n\n tar_watch_ui() and tar_watch_server() make this functionality available to other apps through a Shiny module.\nUnfortunately, none of these options can tell you if any parallel workers or external processes are actually still alive. You can monitor local processes with a utility like top or htop, and traditional HPC scheduler like SLURM or SGE support their own polling utilities such as squeue and qstat. tar_process() and tar_pid() get the process ID of the main R process that last attempted to run the pipeline."
  },
  {
    "objectID": "performance.html#profiling",
    "href": "performance.html#profiling",
    "title": "13  Performance",
    "section": "13.10 Profiling",
    "text": "13.10 Profiling\nThe first sections of the chapter describe quick tips and tricks to improve the performance of a pipeline. If these workarounds fail, then before putting more effort into optimization, it is best to empirically confirm why the code is slow in the first place. “Profiling” is the act of scanning a running instance of a program, and it can detect computational bottlenecks. Follow these steps to profile a targets pipeline.\n\nInstall the proffer R package and its dependencies.\nRun proffer::pprof(tar_make(callr_function = NULL)) on your project.\nWhen a web browser pops up with pprof, select the flame graph and screenshot it.\nPost the flame graph, along with any code and data you can share, to the targets package issue tracker. The maintainer will have a look and try to make the package faster for your use case if speedups are possible."
  },
  {
    "objectID": "performance.html#footnotes",
    "href": "performance.html#footnotes",
    "title": "13  Performance",
    "section": "",
    "text": "Mounted network drives are the particularly egregious. In addition, the files in the data store are important and must be available for subsequent runs of the pipeline, so tempdir() is not suitable.↩︎\nTo learn more about memory and garbage colleciton in R, see http://adv-r.had.co.nz/memory.html.↩︎"
  },
  {
    "objectID": "dynamic.html#branching",
    "href": "dynamic.html#branching",
    "title": "14  Dynamic branching",
    "section": "14.1 Branching",
    "text": "14.1 Branching\nSometimes, a pipeline contains more targets than a user can comfortably type by hand. For projects with hundreds of targets, branching can make the code in _targets.R shorter and more concise.\ntargets supports two types of branching: dynamic branching and static branching. Some projects are better suited to dynamic branching, while others benefit more from static branching or a combination of both. Here is a short list of tradeoffs.\n\n\n\n\n\n\n\nDynamic\nStatic\n\n\n\n\nPipeline creates new targets at runtime.\nAll targets defined in advance.\n\n\nCryptic target names.\nFriendly target names.\n\n\nScales to hundreds of branches.\nDoes not scale as easily for tar_visnetwork() etc.\n\n\nNo metaprogramming required.\nFamiliarity with metaprogramming is helpful."
  },
  {
    "objectID": "dynamic.html#about-dynamic-branching",
    "href": "dynamic.html#about-dynamic-branching",
    "title": "14  Dynamic branching",
    "section": "14.2 About dynamic branching",
    "text": "14.2 About dynamic branching\nDynamic branching is the act of defining new targets (called branches) while the pipeline is running (e.g. during tar_make()). Prior to launching the pipeline, the user does not need to know the number of branches or the input data of each branch.\nTo use dynamic branching, set the pattern argument of tar_target(). The pattern determines how dynamic branches are created and how the input data is partitioned among the branches. A branch is single iteration of the target’s command on a single piece of the input data. Branches are automatically created based on how the input data breaks into pieces, and targets automatically combines the output from all the branches when you reference the dynamic target as a whole."
  },
  {
    "objectID": "dynamic.html#example",
    "href": "dynamic.html#example",
    "title": "14  Dynamic branching",
    "section": "14.3 Example",
    "text": "14.3 Example\nTo illustrate, consider the example pipeline below. It uses dynamic branching to generate random spirographs using code borrowed from W. Joel Schneider’s spiro package.1. A spirograph is a type of two-dimensional algebraic curve determined (in part) by parameters fixed_radius and cycling_radius. Targets fixed_radius and cycling_radius draw random parameter values, and the dynamic target points generates a spirograph dataset for each set of parameters (one spirograph per dynamic branch). Target single_plot plots each spirograph separately, and combine_plot plots all the spirographs together.\n\n# _targets.R\nlibrary(ggplot2)\nlibrary(targets)\nlibrary(tibble)\n\n# From https://github.com/wjschne/spiro/blob/87f73ec37ceb0a7a9d09856ada8ae28d587a2ebd/R/spirograph.R\n# Adapted under the CC0 1.0 Universal license: https://github.com/wjschne/spiro/blob/87f73ec37ceb0a7a9d09856ada8ae28d587a2ebd/LICENSE.md\nspirograph_points &lt;- function(fixed_radius, cycling_radius) {\n  t &lt;- seq(1, 30 * pi, length.out = 1e4)\n  diff &lt;- (fixed_radius - cycling_radius)\n  ratio &lt;- diff / cycling_radius\n  x &lt;- diff * cos(t) + cos(t * ratio)\n  y &lt;- diff * sin(t) - sin(t * ratio)\n  tibble(x = x, y = y, fixed_radius = fixed_radius, cycling_radius = cycling_radius)\n}\n\nplot_spirographs &lt;- function(points) {\n  label &lt;- \"fixed_radius = %s, cycling_radius = %s\"\n  points$parameters &lt;- sprintf(label, points$fixed_radius, points$cycling_radius)\n  ggplot(points) +\n    geom_point(aes(x = x, y = y, color = parameters), size = 0.1) +\n    facet_wrap(~parameters) +\n    theme_gray(16) +\n    guides(color = \"none\")\n}\n\nlist(\n  tar_target(fixed_radius, sample.int(n = 10, size = 2)),\n  tar_target(cycling_radius, sample.int(n = 10, size = 2)),\n  tar_target(\n    points,\n    spirograph_points(fixed_radius, cycling_radius),\n    pattern = map(fixed_radius, cycling_radius)\n  ),\n  tar_target(\n    single_plot,\n    plot_spirographs(points),\n    pattern = map(points),\n    iteration = \"list\"\n  ),\n  tar_target(combined_plot, plot_spirographs(points))\n)\n\n\ntar_make()\n#&gt; ▶ start target cycling_radius\n#&gt; ● built target cycling_radius [0.001 seconds]\n#&gt; ▶ start target fixed_radius\n#&gt; ● built target fixed_radius [0 seconds]\n#&gt; ▶ start branch points_940d58fc\n#&gt; ● built branch points_940d58fc [0.006 seconds]\n#&gt; ▶ start branch points_bf28fe5a\n#&gt; ● built branch points_bf28fe5a [0.012 seconds]\n#&gt; ● built pattern points\n#&gt; ▶ start target combined_plot\n#&gt; ● built target combined_plot [0.027 seconds]\n#&gt; ▶ start branch single_plot_805763e1\n#&gt; ● built branch single_plot_805763e1 [0.019 seconds]\n#&gt; ▶ start branch single_plot_ebcb8a12\n#&gt; ● built branch single_plot_ebcb8a12 [0.011 seconds]\n#&gt; ● built pattern single_plot\n#&gt; ▶ end pipeline [0.413 seconds]\n\nThe final plot shows all the spirographs together.\n\ntar_read(combined_plot)\n\n\n\n\nThis plot comes from all the branches of points aggregated together. Because target points has iteration = \"vector\" in tar_target(), any reference to the whole target automatically aggregates the branches using vctrs::vec_c(). For data frames, this just binds all the rows.\n\ntar_read(points)\n#&gt; # A tibble: 20,000 × 4\n#&gt;        x     y fixed_radius cycling_radius\n#&gt;    &lt;dbl&gt; &lt;dbl&gt;        &lt;int&gt;          &lt;int&gt;\n#&gt;  1 -2.46 -4.43            3              9\n#&gt;  2 -2.41 -4.46            3              9\n#&gt;  3 -2.37 -4.48            3              9\n#&gt;  4 -2.33 -4.50            3              9\n#&gt;  5 -2.28 -4.53            3              9\n#&gt;  6 -2.24 -4.55            3              9\n#&gt;  7 -2.19 -4.57            3              9\n#&gt;  8 -2.15 -4.60            3              9\n#&gt;  9 -2.10 -4.62            3              9\n#&gt; 10 -2.06 -4.64            3              9\n#&gt; # ℹ 19,990 more rows\n\nBy contrast, target single_plot list of branches because of iteration = \"list\".\n\ntar_load(single_plot)\nclass(single_plot)\n#&gt; [1] \"list\"\nlength(single_plot)\n#&gt; [1] 2\n\nUse the branches argument of tar_read() to read an individual branch or subset of branches.\n\ntar_read(single_plot, branches = 1)\n#&gt; $single_plot_805763e1"
  },
  {
    "objectID": "dynamic.html#provenance",
    "href": "dynamic.html#provenance",
    "title": "14  Dynamic branching",
    "section": "14.4 Provenance",
    "text": "14.4 Provenance\nRecall our dynamic target points with branches for spirograph datasets. Each branch has columns fixed_radius and cycling_radius so we know which parameter set each spirograph used. It is good practice to proactively append this metadata to each branch, e.g. in spirograph_points(). That way, if a branch errors out, it is easy to track down the upstream data that caused it.2\n\ntar_read(points, branches = 1) # first branch\n#&gt; # A tibble: 10,000 × 4\n#&gt;        x     y fixed_radius cycling_radius\n#&gt;    &lt;dbl&gt; &lt;dbl&gt;        &lt;int&gt;          &lt;int&gt;\n#&gt;  1 -2.46 -4.43            3              9\n#&gt;  2 -2.41 -4.46            3              9\n#&gt;  3 -2.37 -4.48            3              9\n#&gt;  4 -2.33 -4.50            3              9\n#&gt;  5 -2.28 -4.53            3              9\n#&gt;  6 -2.24 -4.55            3              9\n#&gt;  7 -2.19 -4.57            3              9\n#&gt;  8 -2.15 -4.60            3              9\n#&gt;  9 -2.10 -4.62            3              9\n#&gt; 10 -2.06 -4.64            3              9\n#&gt; # ℹ 9,990 more rows\n\n\ntar_read(points, branches = 2) # second branch\n#&gt; # A tibble: 10,000 × 4\n#&gt;        x     y fixed_radius cycling_radius\n#&gt;    &lt;dbl&gt; &lt;dbl&gt;        &lt;int&gt;          &lt;int&gt;\n#&gt;  1  1.90  3.61            7              2\n#&gt;  2  1.85  3.65            7              2\n#&gt;  3  1.79  3.70            7              2\n#&gt;  4  1.74  3.74            7              2\n#&gt;  5  1.69  3.78            7              2\n#&gt;  6  1.64  3.83            7              2\n#&gt;  7  1.59  3.87            7              2\n#&gt;  8  1.53  3.91            7              2\n#&gt;  9  1.48  3.96            7              2\n#&gt; 10  1.43  4.00            7              2\n#&gt; # ℹ 9,990 more rows"
  },
  {
    "objectID": "dynamic.html#patterns",
    "href": "dynamic.html#patterns",
    "title": "14  Dynamic branching",
    "section": "14.5 Patterns",
    "text": "14.5 Patterns\ntargets supports many more types of dynamic branching patterns.\n\nmap(): one branch per tuple of elements.\ncross(): one branch per combination of elements.\nslice(): select individual pieces to branch over. For example, pattern = slice(x, index = c(3, 4)) branches over the third and fourth slices (or branches) of target x.\nhead(): branch over the first few elements.\ntail(): branch over the last few elements.\nsample(): branch over a random subset of elements.\n\nPatterns are composable. For example, pattern = cross(other_parameter, map(fixed_radius, cycling_radius)) is conceptually equivalent to tidyr::crossing(other_parameter, tidyr::nesting(fixed_radius, cycling_radius)). You can test and experiment with branching structures using tar_pattern(). In the output below, suffixes _1, _2, and _3, denote both dynamic branches and the slices of upstream data they branch over.\n\ntar_pattern(\n  cross(other_parameter, map(fixed_radius, cycling_radius)),\n  other_parameter = 3,\n  fixed_radius = 2,\n  cycling_radius = 2\n)\n#&gt; # A tibble: 6 × 3\n#&gt;   other_parameter   fixed_radius   cycling_radius  \n#&gt;   &lt;chr&gt;             &lt;chr&gt;          &lt;chr&gt;           \n#&gt; 1 other_parameter_1 fixed_radius_1 cycling_radius_1\n#&gt; 2 other_parameter_1 fixed_radius_2 cycling_radius_2\n#&gt; 3 other_parameter_2 fixed_radius_1 cycling_radius_1\n#&gt; 4 other_parameter_2 fixed_radius_2 cycling_radius_2\n#&gt; 5 other_parameter_3 fixed_radius_1 cycling_radius_1\n#&gt; 6 other_parameter_3 fixed_radius_2 cycling_radius_2"
  },
  {
    "objectID": "dynamic.html#iteration",
    "href": "dynamic.html#iteration",
    "title": "14  Dynamic branching",
    "section": "14.6 Iteration",
    "text": "14.6 Iteration\nThe iteration argument of tar_target() determines how to split non-dynamic targets and how to aggregate dynamic ones. Consider the following subset of the spirograph pipeline. Below, iteration is equal to \"vector\" by default.\n\nlist(\n  tar_target(fixed_radius, sample.int(n = 10, size = 2)),\n  tar_target(cycling_radius, sample.int(n = 10, size = 2)),\n  tar_target(\n    points,\n    spirograph_points(fixed_radius, cycling_radius),\n    pattern = map(fixed_radius, cycling_radius)\n  ),\n  tar_target(combined_plot, plot_spirographs(points))\n)\n\nFor non-dynamic targets fixed_radius and cycling_radius, iteration = \"vector\" means that downstream dynamic targets branch over slices from vctrs::vec_slice(). In other words, the first branch of points is spirograph_points(vec_slice(fixed_radius, 1), vec_slice(cycling_radius, 1)), and second branch of points is spirograph_points(vec_slice(fixed_radius, 2), vec_slice(cycling_radius, 2)). Since fixed_radius is a numeric vector, vec_slice(fixed_radius, 1) is a vector of length 1. (But if fixed_radius were a data frame, then vec_slice(fixed_radius, 1) would be a one-row data frame). If iteration were equal to \"list\" for fixed_radius and cycling_radius, then the first and second branches would instead be spirograph_points(fixed_radius[[1]], cycling_radius[[1]]) and spirograph_points(fixed_radius[[2]]), respectively.\nFor dynamic target points, iteration = \"vector\" means all the branches are aggregated with vctrs::vec_c(). Since each branch of points is a data frame, aggregation is equivalent to dplyr::bind_rows() in this case. That is why, as previously shown, tar_read(points) returns a monolithic data frame. points becomes a monolithic data frame also when non-dynamic target combined_plot runs its command plot_spirographs(points). In other words, plot_spirographs(points) is equivalent to plot_spirographs(vec_c(points_940d58fc, points_bf28fe5a)), where points_940d58fc and points_bf28fe5a are the individual branches of points.3. If iteration were equal to \"list\" for points, then plot_spirographs(points) in combined_plot would be equivalent to plot_spirographs(list(points_940d58fc, points_bf28fe5a)).\niteration = \"group\" is for dynamic branching across dplyr::group_by() row groups of a data frame, and it is covered in the next section."
  },
  {
    "objectID": "dynamic.html#branching-over-row-groups",
    "href": "dynamic.html#branching-over-row-groups",
    "title": "14  Dynamic branching",
    "section": "14.7 Branching over row groups",
    "text": "14.7 Branching over row groups\nTo branch over dplyr::group_by() row groups of a data frame, use iteration = \"group\" together with tar_group(). To demonstrate, consider the following alternative version of the spirograph pipeline. Below, we start with a monolithic data frame with all the spirographs together, and then we branch over the row groups of that data frame to create one visual for each dynamic branch.\n\n# _targets.R\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(targets)\nlibrary(tibble)\n\n# From https://github.com/wjschne/spiro/blob/87f73ec37ceb0a7a9d09856ada8ae28d587a2ebd/R/spirograph.R\n# Adapted under the CC0 1.0 Universal license: https://github.com/wjschne/spiro/blob/87f73ec37ceb0a7a9d09856ada8ae28d587a2ebd/LICENSE.md\nspirograph_points &lt;- function(fixed_radius, cycling_radius) {\n  t &lt;- seq(1, 30 * pi, length.out = 1e4)\n  diff &lt;- (fixed_radius - cycling_radius)\n  ratio &lt;- diff / cycling_radius\n  x &lt;- diff * cos(t) + cos(t * ratio)\n  y &lt;- diff * sin(t) - sin(t * ratio)\n  tibble(x = x, y = y, fixed_radius = fixed_radius, cycling_radius = cycling_radius)\n}\n\nplot_spirographs &lt;- function(points) {\n  label &lt;- \"fixed_radius = %s, cycling_radius = %s\"\n  points$parameters &lt;- sprintf(label, points$fixed_radius, points$cycling_radius)\n  ggplot(points) +\n    geom_point(aes(x = x, y = y, color = parameters), size = 0.1) +\n    facet_wrap(~parameters) +\n    theme_gray(16) +\n    guides(color = \"none\")\n}\n\nlist(\n  tar_target(\n    points,\n    bind_rows(\n      spirograph_points(3, 9),\n      spirograph_points(7, 2)\n    ) %&gt;%\n      group_by(fixed_radius, cycling_radius) %&gt;%\n      tar_group(),\n    iteration = \"group\"\n  ),\n  tar_target(\n    single_plot,\n    plot_spirographs(points),\n    pattern = map(points),\n    iteration = \"list\"\n  )\n)\n\n\ntar_make()\n#&gt; ▶ start target points\n#&gt; ● built target points [0.031 seconds]\n#&gt; ▶ start branch single_plot_d464a6a6\n#&gt; ● built branch single_plot_d464a6a6 [0.034 seconds]\n#&gt; ▶ start branch single_plot_4d5f6e9c\n#&gt; ● built branch single_plot_4d5f6e9c [0.041 seconds]\n#&gt; ● built pattern single_plot\n#&gt; ▶ end pipeline [0.349 seconds]\n\n\ntar_read(single_plot, branches = 1)\n#&gt; $single_plot_d464a6a6\n\n\n\n\nThe tar_group_by() function in tarchetypes makes this branching easier. Using tar_group_by(), the pipeline condenses down to:\n\nlist(\n  tar_group_by(\n    points,\n    bind_rows(\n      spirograph_points(3, 9),\n      spirograph_points(7, 2)\n    ),\n    fixed_radius,\n    cycling_radius\n  ),\n  tar_target(\n    single_plot,\n    plot_spirographs(points),\n    pattern = map(points),\n    iteration = \"list\"\n  )\n)\n\nFor similar functions that branch across row groups, visit https://docs.ropensci.org/tarchetypes/reference/index.html#dynamic-grouped-data-frames."
  },
  {
    "objectID": "dynamic.html#branching-over-files",
    "href": "dynamic.html#branching-over-files",
    "title": "14  Dynamic branching",
    "section": "14.8 Branching over files",
    "text": "14.8 Branching over files\nDynamic branching over files is tricky. A target with format = \"file\" treats the entire set of files as an irreducible bundle. That means in order to branch over files downstream, each file must already have its own branch. Here is a pipeline that begins with spirograph data files and loads each into a different dynamic branch.\n\n# _targets.R\nlibrary(targets)\nlist(\n  tar_target(paths, c(\"spirograph_dataset_1.csv\", \"spirograph_dataset_1.csv\")),\n  tar_target(files, paths, format = \"file\", pattern = map(paths)),\n  tar_target(data, read_csv(files), pattern = map(files))\n)\n\nThe tar_files() function from the tarchetypes package is shorthand for the first two targets above.\n\n# _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\nlist(\n  tar_files(files, c(\"spirograph_dataset_1.csv\", \"spirograph_dataset_1.csv\")),\n  tar_target(data, read_csv(files), pattern = map(files))\n)"
  },
  {
    "objectID": "dynamic.html#performance-and-batching",
    "href": "dynamic.html#performance-and-batching",
    "title": "14  Dynamic branching",
    "section": "14.9 Performance and batching",
    "text": "14.9 Performance and batching\nDynamic branching makes it easy to create many targets. Unfortunately, if the number of targets exceeds several thousand, overhead may build up and the package may slow down. Temporary workarounds can avoid overhead in specific cases: for example, the shortcut argument of tar_make(), and choosing a pattern like slice() or head() instead of a full map(). But to minimize overhead at scale, it is better to accomplish the same amount of work with a fewer number of targets. In other words, do more work inside each dynamic branch.\nBatching is particularly useful to reduce overhead. In batching, each dynamic branch performs multiple computations instead of just one. The tarchetypes package supports several general-purpose functions that do batching automatically: most notably tar_rep() and tar_map_rep() for simulation studies and tar_group_count(), tar_group_size(), and tar_group_select() for batching over the rows of a data frame.\nThe packages in the R Targetopia support batching for specific use cases. For example, in stantargets, tar_stan_mcmc_rep_summary() dynamically branches over batches of simulated datasets for Stan models.\nThe targets-stan repository has an example of custom batching implemented from scratch. The goal of the pipeline is to validate a Bayesian model by simulating thousands of dataset, analyzing each with a Bayesian model, and assessing the overall accuracy of the inference. Rather than define a target for each dataset in model, the pipeline breaks up the work into batches, where each batch has multiple datasets or multiple analyses. Here is a version of the pipeline with 40 batches and 25 simulation reps per batch (1000 reps total in a pipeline of 82 targets).\n\n# _targets.R\nlibrary(targets)\nlist(\n  tar_target(model_file, compile_model(\"stan/model.stan\"), format = \"file\"),\n  tar_target(index_batch, seq_len(40)),\n  tar_target(index_sim, seq_len(25)),\n  tar_target(\n    data_continuous,\n    purrr::map_dfr(index_sim, ~simulate_data_continuous()),\n    pattern = map(index_batch)\n  ),\n  tar_target(\n    fit_continuous,\n    map_sims(data_continuous, model_file = model_file),\n    pattern = map(data_continuous)\n  )\n)"
  },
  {
    "objectID": "dynamic.html#footnotes",
    "href": "dynamic.html#footnotes",
    "title": "14  Dynamic branching",
    "section": "",
    "text": "The pipeline uses code borrowed from the spiro package. The code in the spirograph_points() function is adapted from https://github.com/wjschne/spiro/blob/87f73ec37ceb0a7a9d09856ada8ae28d587a2ebd/R/spirograph.R under the CC0 1.0 Universal license: https://github.com/wjschne/spiro/blob/87f73ec37ceb0a7a9d09856ada8ae28d587a2ebd/LICENSE.md↩︎\nSee also https://books.ropensci.org/targets/debugging.html#workspaces.↩︎\npoints_940d58fc and points_bf28fe5a are targets in their own right and can be inspected with tar_read(points_940d58fc) and tar_read(points_bf28fe5a)↩︎"
  },
  {
    "objectID": "static.html#branching",
    "href": "static.html#branching",
    "title": "15  Static branching",
    "section": "15.1 Branching",
    "text": "15.1 Branching\n\n\n\n\n\n\nPerformance\n\n\n\nBranched pipelines can be computationally demanding. See the performance chapter for options, settings, and other choices to optimize and monitor large pipelines.\n\n\nSometimes, a pipeline contains more targets than a user can comfortably type by hand. For projects with hundreds of targets, branching can make the _targets.R file more concise and easier to read and maintain.\ntargets supports two types of branching: dynamic branching and static branching. Some projects are better suited to dynamic branching, while others benefit more from static branching or a combination of both. Here is a short list of tradeoffs.\n\n\n\n\n\n\n\nDynamic\nStatic\n\n\n\n\nPipeline creates new targets at runtime.\nAll targets defined in advance.\n\n\nCryptic target names.\nFriendly target names.\n\n\nScales to hundreds of branches.\nDoes not scale as easily for tar_visnetwork() etc.\n\n\nNo metaprogramming required.\nFamiliarity with metaprogramming is helpful."
  },
  {
    "objectID": "static.html#when-to-use-static-branching",
    "href": "static.html#when-to-use-static-branching",
    "title": "15  Static branching",
    "section": "15.2 When to use static branching",
    "text": "15.2 When to use static branching\nStatic branching is the act of defining a group of targets in bulk before the pipeline starts. Whereas dynamic branching uses last-minute dependency data to define the branches, static branching uses metaprogramming to modify the code of the pipeline up front. Whereas dynamic branching excels at creating a large number of very similar targets, static branching is most useful for smaller number of heterogeneous targets. Some users find it more convenient because they can use tar_manifest() and tar_visnetwork() to check the correctness of static branching before launching the pipeline."
  },
  {
    "objectID": "static.html#map",
    "href": "static.html#map",
    "title": "15  Static branching",
    "section": "15.3 Map",
    "text": "15.3 Map\ntar_map() from the tarchetypes package creates copies of existing target objects, where each new command is a variation on the original. In the example below, we have a data analysis workflow that iterates over datasets and analysis methods. The values data frame has the operational parameters of each data analysis, and tar_map() creates one new target per row.\n\n# _targets.R file:\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(tibble)\nvalues &lt;- tibble(\n  method_function = rlang::syms(c(\"method1\", \"method2\")),\n  data_source = c(\"NIH\", \"NIAID\")\n)\ntargets &lt;- tar_map(\n  values = values,\n  tar_target(analysis, method_function(data_source, reps = 10)),\n  tar_target(summary, summarize_analysis(analysis, data_source))\n)\nlist(targets)\n\n\ntar_manifest()\n#&gt; # A tibble: 4 × 2\n#&gt;   name                   command                                                \n#&gt;   &lt;chr&gt;                  &lt;chr&gt;                                                  \n#&gt; 1 analysis_method2_NIAID \"method2(\\\"NIAID\\\", reps = 10)\"                        \n#&gt; 2 analysis_method1_NIH   \"method1(\\\"NIH\\\", reps = 10)\"                          \n#&gt; 3 summary_method2_NIAID  \"summarize_analysis(analysis_method2_NIAID, \\\"NIAID\\\")\"\n#&gt; 4 summary_method1_NIH    \"summarize_analysis(analysis_method1_NIH, \\\"NIH\\\")\"\n\n\ntar_visnetwork(targets_only = TRUE)\n\n\n\n\n\nFor shorter target names, use the names argument of tar_map(). And for more combinations of settings, use tidyr::expand_grid() on values.\n\n# _targets.R file:\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(tidyr)\nvalues &lt;- expand_grid( # Use all possible combinations of input settings.\n  method_function = rlang::syms(c(\"method1\", \"method2\")),\n  data_source = c(\"NIH\", \"NIAID\")\n)\ntargets &lt;- tar_map(\n  values = values,\n  names = \"data_source\", # Select columns from `values` for target names.\n  tar_target(analysis, method_function(data_source, reps = 10)),\n  tar_target(summary, summarize_analysis(analysis, data_source))\n)\nlist(targets)\n\nIt is extra important to run tar_manifest() to check that tar_map() generates the right R code for the targets. Sometimes, the metaprogramming may not produce the desired commands on your first try.\n\ntar_manifest()\n#&gt; # A tibble: 8 × 2\n#&gt;   name             command                                          \n#&gt;   &lt;chr&gt;            &lt;chr&gt;                                            \n#&gt; 1 analysis_NIAID_1 \"method2(\\\"NIAID\\\", reps = 10)\"                  \n#&gt; 2 analysis_NIAID   \"method1(\\\"NIAID\\\", reps = 10)\"                  \n#&gt; 3 analysis_NIH_1   \"method2(\\\"NIH\\\", reps = 10)\"                    \n#&gt; 4 analysis_NIH     \"method1(\\\"NIH\\\", reps = 10)\"                    \n#&gt; 5 summary_NIAID_1  \"summarize_analysis(analysis_NIAID_1, \\\"NIAID\\\")\"\n#&gt; 6 summary_NIAID    \"summarize_analysis(analysis_NIAID, \\\"NIAID\\\")\"  \n#&gt; 7 summary_NIH_1    \"summarize_analysis(analysis_NIH_1, \\\"NIH\\\")\"    \n#&gt; 8 summary_NIH      \"summarize_analysis(analysis_NIH, \\\"NIH\\\")\"\n\nAnd of course, check the dependency graph to ensure the pipeline is properly connected. If tar_map() generates a lot of targets, the graph may render slowly or look too cumbersome. If that happens, choose a small subset of rows of values for tar_map() and then try again on the smaller pipeline.\n\n# You may need to zoom out on this interactive graph to see all 8 targets.\ntar_visnetwork(targets_only = TRUE)\n\n\n\n\n\n\n15.3.1 Limitations\ntar_map() generates R expressions to serve as commands in other targets. When it substitutes an element from values, it needs a way to transform the element into valid R code. For elements even a little bit complicated, especially nested data frames and objects with attributes, this is not always possible. For these complicated elements, it is best to use quote() to work with the underlying expressions instead of the objects themselves. See https://github.com/ropensci/tarchetypes/discussions/105 for an example."
  },
  {
    "objectID": "static.html#dynamic-within-static-branching",
    "href": "static.html#dynamic-within-static-branching",
    "title": "15  Static branching",
    "section": "15.4 Dynamic-within-static branching",
    "text": "15.4 Dynamic-within-static branching\nYou can even combine together static and dynamic branching. The static tar_map() is an excellent outer layer on top of targets with patterns. The following is a sketch of a pipeline that runs each of two data analysis methods 10 times, once per random seed. Static branching iterates over the method functions, while dynamic branching iterates over the seeds. tar_map() creates new patterns as well as new commands. So below, the summary methods map over the analysis methods both statically and dynamically.\n\n# _targets.R file:\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(tibble)\nrandom_seed_target &lt;- tar_target(random_seed, seq_len(10))\ntargets &lt;- tar_map(\n  values = tibble(method_function = rlang::syms(c(\"method1\", \"method2\"))),\n  tar_target(\n    analysis,\n    method_function(\"NIH\", seed = random_seed),\n    pattern = map(random_seed)\n  ),\n  tar_target(\n    summary,\n    summarize_analysis(analysis),\n    pattern = map(analysis)\n  )\n)\nlist(random_seed_target, targets)\n\n\ntar_manifest()\n#&gt; # A tibble: 5 × 3\n#&gt;   name             command                                pattern              \n#&gt;   &lt;chr&gt;            &lt;chr&gt;                                  &lt;chr&gt;                \n#&gt; 1 random_seed      \"seq_len(10)\"                          &lt;NA&gt;                 \n#&gt; 2 analysis_method1 \"method1(\\\"NIH\\\", seed = random_seed)\" map(random_seed)     \n#&gt; 3 analysis_method2 \"method2(\\\"NIH\\\", seed = random_seed)\" map(random_seed)     \n#&gt; 4 summary_method1  \"summarize_analysis(analysis_method1)\" map(analysis_method1)\n#&gt; 5 summary_method2  \"summarize_analysis(analysis_method2)\" map(analysis_method2)\n\n\ntar_visnetwork(targets_only = TRUE)"
  },
  {
    "objectID": "static.html#combine",
    "href": "static.html#combine",
    "title": "15  Static branching",
    "section": "15.5 Combine",
    "text": "15.5 Combine\ntar_combine() from the tarchetypes package creates a new target to aggregate the results of upstream targets. In the simple example below, our combined target simply aggregates the rows returned from two other targets.\n\n# _targets.R file:\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(tibble)\noptions(crayon.enabled = FALSE)\ntarget1 &lt;- tar_target(head, head(mtcars, 1))\ntarget2 &lt;- tar_target(tail, tail(mtcars, 1))\ntarget3 &lt;- tar_combine(combined_target, target1, target2)\nlist(target1, target2, target3)\n\n\ntar_manifest()\n#&gt; # A tibble: 3 × 2\n#&gt;   name            command                                                       \n#&gt;   &lt;chr&gt;           &lt;chr&gt;                                                         \n#&gt; 1 head_mtcars     head(mtcars, 1)                                               \n#&gt; 2 tail_mtcars     tail(mtcars, 1)                                               \n#&gt; 3 combined_target vctrs::vec_c(head_mtcars = head_mtcars, tail_mtcars = tail_mt…\n\n\ntar_visnetwork(targets_only = TRUE)\n\n\n\n\n\n\ntar_make()\n#&gt; ▶ start target head_mtcars\n#&gt; ● built target head_mtcars [0.002 seconds]\n#&gt; ▶ start target tail_mtcars\n#&gt; ● built target tail_mtcars [0 seconds]\n#&gt; ▶ start target combined_target\n#&gt; ● built target combined_target [0 seconds]\n#&gt; ▶ end pipeline [0.075 seconds]\n\n\ntar_read(combined_target)\n#&gt;             mpg cyl disp  hp drat   wt  qsec vs am gear carb\n#&gt; Mazda RX4  21.0   6  160 110 3.90 2.62 16.46  0  1    4    4\n#&gt; Volvo 142E 21.4   4  121 109 4.11 2.78 18.60  1  1    4    2\n\nTo use tar_combine() and tar_map() together in more complicated situations, you may need to supply unlist = FALSE to tar_map(). That way, tar_map() will return a nested list of target objects, and you can combine the ones you want. The pipeline extends our previous tar_map() example by combining just the summaries, omitting the analyses from tar_combine(). Also note the use of bind_rows(!!!.x) below. This is how you supply custom code to combine the return values of other targets. .x is a placeholder for the return values, and !!! is the “unquote-splice” operator from the rlang package.\n\n# _targets.R file:\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(tibble)\nrandom_seed &lt;- tar_target(random_seed, seq_len(10))\nmapped &lt;- tar_map(\n  unlist = FALSE, # Return a nested list from tar_map()\n  values = tibble(method_function = rlang::syms(c(\"method1\", \"method2\"))),\n  tar_target(\n    analysis,\n    method_function(\"NIH\", seed = random_seed),\n    pattern = map(random_seed)\n  ),\n  tar_target(\n    summary,\n    summarize_analysis(analysis),\n    pattern = map(analysis)\n  )\n)\ncombined &lt;- tar_combine(\n  combined_summaries,\n  mapped[[\"summary\"]],\n  command = dplyr::bind_rows(!!!.x, .id = \"method\")\n)\nlist(random_seed, mapped, combined)\n\n\ntar_manifest()\n#&gt; Warning message:\n#&gt; Targets and globals must have unique names. Ignoring global objects that conflict with target names: random_seed. Warnings like this one are important, but if you must suppress them, you can do so with Sys.setenv(TAR_WARN = \"false\").\n#&gt; # A tibble: 6 × 3\n#&gt;   name               command                                             pattern\n#&gt;   &lt;chr&gt;              &lt;chr&gt;                                               &lt;chr&gt;  \n#&gt; 1 random_seed        \"seq_len(10)\"                                       &lt;NA&gt;   \n#&gt; 2 analysis_method1   \"method1(\\\"NIH\\\", seed = random_seed)\"              map(ra…\n#&gt; 3 analysis_method2   \"method2(\\\"NIH\\\", seed = random_seed)\"              map(ra…\n#&gt; 4 summary_method1    \"summarize_analysis(analysis_method1)\"              map(an…\n#&gt; 5 summary_method2    \"summarize_analysis(analysis_method2)\"              map(an…\n#&gt; 6 combined_summaries \"dplyr::bind_rows(summary_method1 = summary_method… &lt;NA&gt;\n\n\ntar_visnetwork(targets_only = TRUE)\n#&gt; Warning message:\n#&gt; Targets and globals must have unique names. Ignoring global objects that conflict with target names: random_seed. Warnings like this one are important, but if you must suppress them, you can do so with Sys.setenv(TAR_WARN = \"false\")."
  },
  {
    "objectID": "static.html#metaprogramming",
    "href": "static.html#metaprogramming",
    "title": "15  Static branching",
    "section": "15.6 Metaprogramming",
    "text": "15.6 Metaprogramming\nCustom metaprogramming is a more flexible alternative to tar_map() and tar_combine(). tar_eval() from tarchetypes accepts an arbitrary expression and iteratively plugs in symbols. Below, we use it to branch over datasets.\n\n# _targets.R\nlibrary(rlang)\nlibrary(targets)\nlibrary(tarchetypes)\nstring &lt;- c(\"gapminder\", \"who\", \"imf\")\nsymbol &lt;- syms(string)\ntar_eval(\n  tar_target(symbol, get_data(string)),\n  values = list(string = string, symbol = symbol)\n)\n\ntar_eval() has fewer guardrails than tar_map() or tar_combine(), so tar_manifest() is especially important for checking the correctness of your metaprogramming.\n\ntar_manifest(fields = command)\n#&gt; # A tibble: 3 × 2\n#&gt;   name      command                  \n#&gt;   &lt;chr&gt;     &lt;chr&gt;                    \n#&gt; 1 imf       \"get_data(\\\"imf\\\")\"      \n#&gt; 2 gapminder \"get_data(\\\"gapminder\\\")\"\n#&gt; 3 who       \"get_data(\\\"who\\\")\""
  },
  {
    "objectID": "static.html#hooks",
    "href": "static.html#hooks",
    "title": "15  Static branching",
    "section": "15.7 Hooks",
    "text": "15.7 Hooks\nHooks are supported in tarchtypes version 0.2.0 and above, and they allow you to prepend or wrap code in multiple targets at a time. For example, tar_hook_before() is a robust way to invoke the conflicted package to resolve namespace conflicts that works with distributed computing and does not require a project-level .Rprofile file.\n\n# _targets.R file\nlibrary(tarchetypes)\nlibrary(magrittr)\ntar_option_set(packages = c(\"conflicted\", \"dplyr\"))\nsource(\"R/functions.R\")\nlist(\n  tar_target(data, get_time_series_data()),\n  tar_target(analysis1, analyze_months(data)),\n  tar_target(analysis2, analyze_weeks(data))\n) %&gt;%\n  tar_hook_before(\n    hook = conflicted_prefer(\"filter\", \"dplyr\"),\n    names = starts_with(\"analysis\")\n  )\n\n\n# R console\ntargets::tar_manifest(fields = command)\n#&gt; # A tibble: 3 × 2\n#&gt;   name      command                                                             \n#&gt;   &lt;chr&gt;     &lt;chr&gt;                                                               \n#&gt; 1 data      \"get_time_series_data()\"                                            \n#&gt; 2 analysis1 \"{\\n     conflicted_prefer(\\\"filter\\\", \\\"dplyr\\\")\\n     analyze(dat…\n#&gt; 3 analysis2 \"{\\n     conflicted_prefer(\\\"filter\\\", \\\"dplyr\\\")\\n     analyze(dat…\n\nSimilarly, tar_hook_outer() wraps expressions around target commands, and tar_hook_inner() wraps expressions around target dependencies. These hooks could potentially help encrypt targets before storage in _targets/ and decrypt targets before retrieval, as demonstrated in the sketch below.\nData security is the sole responsibility of the user and not the responsibility of targets, tarchetypes, or related pipeline packages. You as the user are responsible for validating your own target specifications and custom code and applying additional security precautions as appropriate for the situation.\n\n# _targets.R file\nlibrary(tarchetypes)\nlibrary(magrittr)\nlist(\n  tar_target(data1, get_data1()),\n  tar_target(data2, get_data2()),\n  tar_target(analysis, analyze(data1, data2))\n) %&gt;%\n  tar_hook_outer(encrypt(.x, threads = 2)) %&gt;%\n  tar_hook_inner(decrypt(.x))\n\n\n# R console\ntargets::tar_manifest(fields = command)\n#&gt; # A tibble: 3 × 2\n#&gt;   name     command                                                      \n#&gt;   &lt;chr&gt;    &lt;chr&gt;                                                        \n#&gt; 1 data1    encrypt(get_data1(), threads = 2)                            \n#&gt; 2 data2    encrypt(get_data2(), threads = 2)                            \n#&gt; 3 analysis encrypt(analyze(decrypt(data1), decrypt(data2)), threads = 2)"
  },
  {
    "objectID": "hpc.html#clustermq",
    "href": "hpc.html#clustermq",
    "title": "Appendix A — High-performance computing (the old way)",
    "section": "A.1 Clustermq",
    "text": "A.1 Clustermq\ntar_make_clustermq() uses the clustermq package, and prior familiarity with clustermq is extremely helpful for configuring targets and diagnosing errors. So before you use tar_make_clustermq(), please read the documentation at https://mschubert.github.io/clustermq/ and try out clustermq directly. If you plan to use a scheduler like SLURM or SGE, please configure and experiment with clustermq on your scheduler without targets. And if you later experience issues with tar_make_clustermq(), try to isolate the problem by creating a reproducible example that uses clustermq and not targets. Peeling back layers can help isolate problems and point toward specific solutions, and targets is usually one of the outer layers.\n\nA.1.1 Persistent workers\ntar_make_clustermq() uses persistent workers. A persistent worker is an R process that launches early in the pipeline and stays running until the whole pipeline starts to wind down. A persistent worker usually runs multiple targets during its lifecycle, and it is not possible to precisely predict in advance which targets will be assigned to which workers. The video clip below visualizes the concept.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA.1.2 Clustermq installation\nPersistent workers require the clustermq R package, which in turn requires ZeroMQ. Please refer to the clustermq installation guide for specific instructions.\n\n\nA.1.3 Automatic configuration with use_targets()\nIf clustermq is installed, then use_targets() function configures clustermq automatically. use_targets() tries to detect the cluster you are using and write the appropriate _targets.R settings clustermq configuration files commensurate with your system resources. On most systems, this should allow you you to run tar_make_clustermq() with no extra configuration. If so, you can skip the rest of the clustermq section. If not, read on to learn how to configure clustermq for targets.\n\n\nA.1.4 Clustermq local configuration\nTo utilize parallel computing on your local machine, set the clustermq.scheduler option to \"multicore\" or \"multiprocess\" in your _targets.R file. See the configuration instructions for details.\n\n# _targets.R\noptions(clustermq.scheduler = \"multiprocess\")\nlist(\n  tar_target(data, get_data()),\n  tar_target(fast_fit, fit_small_model(data)),\n  tar_target(slow_fit, fit_slow_model(data)),\n  tar_target(plot_1, make_plot(fast_fit)),\n  tar_target(plot_2, make_plot(slow_fit))\n)\n\nThen, run tar_make_clustermq() with the appropriate number of workers. These workers are local R processes that run concurrently to run the outdated targets in the pipeline. The workers launch as soon as there is an outdated target with deployment = \"worker\", and they continue running until there are no more targets to run.\n\n# R console\ntar_make_clustermq(workers = 2)\n\n\n\nA.1.5 Clustermq remote configuration\nA cluster is a collection of multiple computers that work together to run computationally demanding workloads. A cluster is capable of running far more tasks simultaneously than a local workstation like a PC or laptop. When configured for a cluster, tar_make_clustermq() uses clustermq to run persistent workers as long-running distributed jobs. To manually set the configuration,\n\nChoose a scheduler listed here that corresponds to your cluster’s resource manager.\nCreate a template file that configures the computing requirements and other settings for the cluster.\n\nSupply the scheduler option and template file to the clustermq.scheduler and clustermq.template global options in your target script file (default: _targets.R).\n\n# _targets.R\noptions(clustermq.scheduler = \"sge\", clustermq.template = \"sge.tmpl\")\nlist(\n  tar_target(data, get_data()),\n  tar_target(fast_fit, fit_small_model(data)),\n  tar_target(slow_fit, fit_slow_model(data)),\n  tar_target(plot_1, make_plot(fast_fit)),\n  tar_target(plot_2, make_plot(slow_fit))\n)\n\nAbove, sge_tmpl refers to a template file like the one below.\n## From https://github.com/mschubert/clustermq/wiki/SGE\n#$ -N {{ job_name }}  # Worker name.\n#$ -t 1-{{ n_jobs }}  # Submit workers as an array.\n#$ -j y               # Combine stdout and stderr into one worker log file.\n#$ -o /dev/null       # Worker log files.\n#$ -cwd               # Use project root as working directory.\n#$ -V                 # Use environment variables.\nmodule load R/3.6.3   # Needed if R is an environment module on the cluster.\nCMQ_AUTH={{ auth }} R --no-save --no-restore -e 'clustermq:::worker(\"{{ main }}\")' # Leave alone.\nThen, run tar_make_clustermq() as before. Instead of running locally, the workers will run as jobs on the cluster. Because they are persistent workers, they launch as soon as there is an outdated target with deployment = \"worker\", and they continue running until they complete their current targets and there are no more targets to assign.\n\n# R console\ntar_make_clustermq(workers = 2)\n\nSee the examples linked from here to see how this setup works in real-world projects.\n\n\nA.1.6 Clustermq template file configuration\nIn addition to configuration options hard-coded in the template file, you can supply custom computing resources with the resources argument of tar_option_set(). As an example, let’s use a wildcard for the number of cores per worker on an SGE cluster. In the template file, supply {{ num_cores }} wildcard to the -pe smp flag.\n#$ -pe smp {{ num_cores }} # Number of cores per worker\n#$ -N {{ job_name | 1 }}\n#$ -t 1-{{ n_jobs }}\n#$ -j y\n#$ -o /dev/null\n#$ -cwd\n#$ -V\nmodule load R/3.6.3\nCMQ_AUTH={{ auth }} R --no-save --no-restore -e 'clustermq:::worker(\"{{ main }}\")'\nThen, supply the value of num_cores to the resources option from within the target script file (default: _targets.R). In older version of targets, resources was a named list. In targets 0.5.0.9000 and above, please create the resources argument with helpers tar_resources() and tar_resources_clustermq().\n\n# _targets.R\n# With older versions of targets:\n# tar_option_set(resources = list(num_cores = 2))\n# With targets &gt;= 0.5.0.9000:\ntar_option_set(\n  resources = tar_resources(\n    clustermq = tar_resources_clustermq(template = list(num_cores = 2))\n  )\n)\nlist(\n  tar_target(...),\n  ... # more targets\n)\n\nFinally, call tar_make_clustermq() normally.\n\n# R console\ntar_make_clustermq(workers = 2)\n\nThis particular use case comes up when you have custom parallel computing within targets and need to take advantage of multiple cores.\n\n\n\n\n\n\nclustermq resources\n\n\n\nRemember: with tar_make_clustermq(), the workers are persistent, which means there is not a one-to-one correspondence between workers and targets. In the resources arguemnt of tar_option_set(), the clustermq-specific resources apply to the workers, not the targets directly. So in the resources argument of tar_target(), any clustermq-specific will be ignored. tar_option_set() is the only way to set clustermq resources."
  },
  {
    "objectID": "hpc.html#future",
    "href": "hpc.html#future",
    "title": "Appendix A — High-performance computing (the old way)",
    "section": "A.2 Future",
    "text": "A.2 Future\ntar_make_future() uses the future package, and prior familiarity with future is extremely helpful for configuring targets and diagnosing errors. So before you use tar_make_future(), please read the documentation at https://future.futureverse.org/ and try out future directly, ideally with backends like future.callr and possibly future.batchtools. If you plan to use a scheduler like SLURM or SGE, please configure and experiment with future on your scheduler without targets. And if you later experience issues with tar_make_future(), try to isolate the problem by creating a reproducible example that uses future and not targets. Same goes for future.batchtools if applicable. Peeling back layers can help isolate problems and point toward specific solutions, and targets is usually one of the outer layers.\n\nA.2.1 Transient workers\ntar_make_future() runs transient workers. That means each target gets its own worker which initializes when the target begins and terminates when the target ends. The following video clip demonstrates the concept.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA.2.2 Automatic configuration with use_targets()\nIf future and future.batchtools are installed, then use_targets() function configures future automatically. use_targets() tries to detect the cluster you are using and write the appropriate _targets.R settings, and if appropriate, the batchtools configuration file commensurate with your system resources. On most systems, this should allow you you to run tar_make_future() with no extra configuration. If so, you can skip the rest of the future section. If not, read on to learn how to configure future for targets.\n\n\nA.2.3 Future installation\nInstall the future package.\n\ninstall.packages(\"future\")\n\nIf you intend to use a cluster, be sure to install the future.batchtools package too.\n\ninstall.packages(\"future.batchtools\")\n\nThe future ecosystem contains even more packages that extend future’s parallel computing functionality, such as future.callr.\n\ninstall.packages(\"future.callr\")\n\n\n\nA.2.4 Future locally\nIf you ar manually configuring future/future.batchtools for your pipeline, declare a future plan in your target script file (default: _targets.R). The callr plan from the future.callr package is recommended.3 It is crucial that future::plan() is called in the target script file itself - defining a plan interactively before invoking tar_make_future() does not leverage the future package.\n\n# _targets.R\nlibrary(future)\nlibrary(future.callr)\nplan(callr)\nlist(\n  tar_target(data, get_data()),\n  tar_target(fast_fit, fit_small_model(data)),\n  tar_target(slow_fit, fit_slow_model(data)),\n  tar_target(plot_1, make_plot(fast_fit)),\n  tar_target(plot_2, make_plot(slow_fit))\n)\n\nThen, run tar_make_future() with the desired number of workers. Here, the workers argument specifies the maximum number of transient workers to allow at a given time. Some future plans also have optional workers arguments that set their own caps.\n\n# R console\ntar_make_future(workers = 2)\n\n\n\nA.2.5 Future remotely\nTo run transient workers on a cluster, first install the future.batchtools package. Then, set one of these plans in your target script file (default: _targets.R).\n\n# _targets.R\nlibrary(future)\nlibrary(future.batchtools)\nplan(batchtools_sge, template = \"sge.tmpl\")\nlist(\n  tar_target(data, get_data()),\n  tar_target(fast_fit, fit_small_model(data)),\n  tar_target(slow_fit, fit_slow_model(data)),\n  tar_target(plot_1, make_plot(fast_fit)),\n  tar_target(plot_2, make_plot(slow_fit))\n)\n\nHere, our template file sge.tmpl is configured for batchtools.\n#!/bin/bash\n#$ -cwd               # Run in the current working directory.\n#$ -j y               # Direct stdout and stderr to the same file.\n#$ -o &lt;%= log.file %&gt; # log file\n#$ -V                 # Use environment variables.\n#$ -N &lt;%= job.name %&gt; # job name\nmodule load R/3.6.3   # Uncomment and adjust if R is an environment module.\nRscript -e 'batchtools::doJobCollection(\"&lt;%= uri %&gt;\")' # Leave alone.\nexit 0 # Leave alone.\n\n\nA.2.6 Future configuration\nThe tar_target(), tar_target_raw(), and tar_option_set() functions accept a resources argument.4 For example, if our batchtools template file has a wildcard for the number of cores for a job,\n#!/bin/bash\n#$ -pe smp &lt;%= resources[[\"num_cores\"]] | 1 %&gt; # Wildcard for cores per job.\n#$ -cwd\n#$ -j y\n#$ -o &lt;%= log.file %&gt;\n#$ -V\n#$ -N &lt;%= job.name %&gt;\nmodule load R/3.6.3\nRscript -e 'batchtools::doJobCollection(\"&lt;%= uri %&gt;\")'\nexit 0\nthen you can set the number of cores for an individual target using a target-specific future plan. In the case below, maybe the slow model needs 2 cores to run fast enough. Because of the resources[[\"num_cores\"]] placeholder in the above template file, we can control the number of cores in each target through its local plan.5\n\n# _targets.R\nlibrary(future)\nlibrary(future.batchtools)\nplan(batchtools_sge, template = \"sge.tmpl\")\nlist(\n  tar_target(data, get_data()),\n  tar_target(fast_fit, fit_small_model(data)),\n  # With older version of targets:\n  # tar_target(slow_fit, fit_slow_model(data), resources = list(num_cores = 2)),\n  # With targets &gt;= 0.5.0.9000:\n  tar_target(\n    slow_fit,\n    fit_slow_model(data),\n    resources = tar_resources(\n      future = tar_resources_future(\n        plan = tweak(\n          batchtools_sge,\n          template = \"sge.tmpl\",\n          resources = list(num_cores = 2)\n        )\n      )\n    )\n  ),\n  tar_target(plot_1, make_plot(fast_fit)),\n  tar_target(plot_2, make_plot(slow_fit))\n)\n\nThen, run tar_make_future() as usual.\n\n# R console\ntar_make_future(workers = 2)"
  },
  {
    "objectID": "hpc.html#advanced",
    "href": "hpc.html#advanced",
    "title": "Appendix A — High-performance computing (the old way)",
    "section": "A.3 Advanced",
    "text": "A.3 Advanced\nFunctions tar_target(), tar_target_raw(), and tar_option_set() support advanced configuration options for heavy-duty pipelines that require high-performance computing.\n\ndeployment: With the deployment argument, you can choose to run some targets locally on the main process instead of on a high-performance computing worker. This options is suitable for lightweight targets such as R Markdown reports where runtime is quick and a cluster would be excessive.\nmemory: Choose whether to retain a target in memory or remove it from memory whenever it is not needed at the moment. This is a tradeoff between memory consumption and storage read speeds, and like all of the options listed here, you can set it on a target-by-target basis. The default settings consume a lot of memory to avoid frequently reading from storage. To keep memory usage down to a minimum, set memory = \"transient\" and garbage_collection = TRUE in tar_target() or tar_option_set(). For cloud-based dynamic files such as format = \"aws_file\", this memory policy applies to temporary local copies of the file in _targets/scratch/: \"persistent\" means they remain until the end of the pipeline, and \"transient\" means they get deleted from the file system as soon as possible. The former conserves bandwidth, and the latter conserves local storage.\ngarbage_collection: Choose whether to run base::gc() just before running the target.\nstorage: Choose whether the parallel workers or the main process is responsible for saving the target’s value. For slow network file systems on clusters, storage = \"main\" is often faster for small numbers of targets. For large numbers of targets or low-bandwidth connections between the main and workers, storage = \"worker\" is often faster. Always choose storage = \"main\" if the workers do not have access to the file system with the _targets/ data store.\nretrieval: Choose whether the parallel workers or the main process is responsible for reading dependency targets from disk. Should usually be set to whatever you choose for storage (default). Always choose retrieval = \"main\" if the workers do not have access to the file system with the _targets/ data store.\nformat: If your pipeline has large computation, it may also have large data. Consider setting the format argument to help targets store and retrieve your data faster.\nerror: Set error to \"continue\" to let the rest of the pipeline keep running even if a target encounters an error."
  },
  {
    "objectID": "hpc.html#cloud-computing",
    "href": "hpc.html#cloud-computing",
    "title": "Appendix A — High-performance computing (the old way)",
    "section": "A.4 Cloud computing",
    "text": "A.4 Cloud computing\nRight now, targets does not have built-in cloud-based distributed computing support. However, future development plans include seamless integration with AWS Batch. As a temporary workaround, it is possible to deploy a burstable SLURM cluster using AWS ParallelCluster and leverage targets’ existing support for traditional schedulers."
  },
  {
    "objectID": "hpc.html#footnotes",
    "href": "hpc.html#footnotes",
    "title": "Appendix A — High-performance computing (the old way)",
    "section": "",
    "text": "Please use tar_make_clustermq() or tar_make_future() instead of multiple concurrent calls to tar_make(). The former is the proper way to use parallel computing in targets, and the latter will probably break the data store.↩︎\nUnlike drake, targets applies this behavior not only to stem targets, but also to branches of patterns.↩︎\nSome alternative local future plans are listed here.↩︎\nThe resources of tar_target() defaults to tar_option_get(\"resources\"). You can set the default value for all targets using tar_option_set().↩︎\nIn older version of targets, resources was a named list. In targets version 0.5.0.9000 and above, please create the resources argument with helpers tar_resources() and tar_resources_future().↩︎"
  },
  {
    "objectID": "drake.html#why-is-drake-superseded",
    "href": "drake.html#why-is-drake-superseded",
    "title": "Appendix B — What about drake?",
    "section": "B.1 Why is drake superseded?",
    "text": "B.1 Why is drake superseded?\nNearly four years of community feedback have exposed major user-side limitations regarding data management, collaboration, dynamic branching, and parallel efficiency. Unfortunately, these limitations are permanent. Solutions in drake itself would make the package incompatible with existing projects that use it, and the internal architecture is too copious, elaborate, and mature for such extreme refactoring. That is why targets was created. The targets package borrows from past learnings, user suggestions, discussions, complaints, success stories, and feature requests, and it improves the user experience in ways that will never be possible in drake."
  },
  {
    "objectID": "drake.html#transitioning-to-targets",
    "href": "drake.html#transitioning-to-targets",
    "title": "Appendix B — What about drake?",
    "section": "B.2 Transitioning to targets",
    "text": "B.2 Transitioning to targets\nIf you know drake, then you already almost know targets. The programming style is similar, and most functions in targets have counterparts in drake.\n\n\n\nFunctions in drake\nCounterparts in targets\n\n\n\n\nuse_drake(), drake_script()\ntar_script()\n\n\ndrake_plan()\ntar_manifest(), tarchetypes::tar_plan()\n\n\ntarget()\ntar_target(), tar_target_raw()\n\n\ndrake_config()\ntar_option_set()\n\n\noutdated(), r_outdated()\ntar_outdated()\n\n\nvis_drake_graph(), r_vis_drake_graph()\ntar_visnetwork(), tar_glimpse()\n\n\ndrake_graph_info(), r_drake_graph_info()\ntar_network()\n\n\nmake(), r_make()\ntar_make(), tar_make_clustermq(), tar_make_future()\n\n\nloadd()\ntar_load()\n\n\nreadd()\ntar_read()\n\n\ndiagnose(), build_times(), cached(), drake_cache_log()\ntar_meta()\n\n\ndrake_progress(), drake_running(), drake_done(), drake_failed(), drake_cancelled()\ntar_progress()\n\n\nclean()\ntar_deduplicate(), tar_delete(), tar_destroy(), tar_invalidate()\n\n\ndrake_gc()\ntar_prune()\n\n\nid_chr()\ntar_name(), tar_path()\n\n\nknitr_in()\ntarchetypes::tar_render()\n\n\ncancel(), cancel_if()\ntar_cancel()\n\n\ntrigger()\ntar_cue()\n\n\ndrake_example(), drake_example(), load_mtcars_example(), clean_mtcars_example()\nUnsupported. Example targets pipelines are in individual repositories linked from here.\n\n\ndrake_build()\nUnsupported in targets to ensure coherence with dynamic branching.\n\n\ndrake_debug()\nSee the debugging chapter.\n\n\ndrake_history(), recoverable()\nUnsupported in targets. Instead of trying to manage history and data recovery directly, targets maintains a much lighter/friendlier data store to make it easier to use external data versioning tools instead.\n\n\nmissed(), tracked(), deps_code(), deps_target(), deps_knitr(), deps_profile()\nUnsupported in targets because dependency detection is easier to understand than in drake.\n\n\ndrake_hpc_template_file(), drake_hpc_template_files()\nDeemed out of scope for targets.\n\n\ndrake_cache(), new_cache(), find_cache().\nUnsupported because targets is far more strict and paternalistic about data/file management.\n\n\nrescue_cache(), which_clean(), cache_planned(), cache_unplanned()\nUnsupported due to the simplified data management system and storage cleaning functions.\n\n\ndrake_get_session_info()\nDeemed superfluous and a potential bottleneck. Discarded for targets.\n\n\nread_drake_seed()\nSuperfluous because targets always uses the same global seed. tar_meta() shows all the target-level seeds.\n\n\nshow_source()\nDeemed superfluous. Discarded in targets to conserve storage space in _targets/meta/meta.\n\n\ndrake_tempfile()\nSuperfluous in targets because there is no special disk.frame storage format. (Dynamic file targets are much better for managing disk.frames.)\n\n\nfile_store()\nSuperfluous in targets because all files are dynamic files and there is no longer a need to Base32-encode any file names.\n\n\n\nLikewise, many make() arguments have equivalent arguments elsewhere.\n\n\n\nArgument of drake::make()\nCounterparts in targets\n\n\n\n\ntargets\nnames in tar_make() etc.\n\n\nenvir\nenvir in tar_option_set()\n\n\nverbose\nreporter in tar_make() etc.\n\n\nparallelism\nChoice of function: tar_make() vs tar_make_clustermq() vs tar_make_future()\n\n\njobs\nworkers in tar_make_clustermq() and tar_make_future()\n\n\npackages\npackages in tar_target() and tar_option_set()\n\n\nlib_loc\nlibrary in tar_target() and tar_option_set()\n\n\ntrigger\ncue in tar_target() and tar_option_set()\n\n\ncaching\nstorage and retrieval in tar_target() and tar_option_set()\n\n\nkeep_going\nerror in tar_target() and tar_option_set()\n\n\nmemory_strategy\nmemory in tar_target() and tar_option_set()\n\n\ngarbage_collection\ngarbage_collection in tar_target() and tar_option_set()\n\n\ntemplate\nresources in tar_target() and tar_option_set(), along with helpers like tar_resources().\n\n\ncurl_handles\nhandle element of resources argument of tar_target() and tar_option_set()\n\n\nformat\nformat in tar_target() and tar_option_set()\n\n\nseed\nSuperfluous because targets always uses the same global seed. [tar_meta()] shows all the target-level seeds.\n\n\n\nIn addition, many optional columns of drake plans are expressed differently in targets.\n\n\n\nOptional column of drake plans\nFeature in targets\n\n\n\n\nformat\nformat argument of tar_target() and tar_option_set()\n\n\ndynamic\npattern argument of tar_target() and tar_option_set()\n\n\ntransform\nstatic branching functions in tarchetypes such as tar_map() and tar_combine()\n\n\ntrigger\ncue argument of tar_target() and tar_option_set()\n\n\nhpc\ndeployment argument of tar_target() and tar_option_set()\n\n\nresources\nresources argument of tar_target() and tar_option_set()\n\n\ncaching\nstorage and retrieval arguments of tar_target() and tar_option_set()"
  },
  {
    "objectID": "drake.html#advantages-of-targets-over-drake",
    "href": "drake.html#advantages-of-targets-over-drake",
    "title": "Appendix B — What about drake?",
    "section": "B.3 Advantages of targets over drake",
    "text": "B.3 Advantages of targets over drake\n\nB.3.1 Better guardrails by design\ndrake leaves ample room for user-side mistakes, and some of these mistakes require extra awareness or advanced knowledge of R to consistently avoid. The example behaviors below are too systemic to solve and still preserve back-compatibility.\n\nBy default, make() looks for functions and global objects in the parent environment of the calling R session. Because the global environment is often old and stale in practical situations, which causes targets to become incorrectly invalidated. Users need to remember to restart the session before calling make(). The issue is discussed here, and the discussion led to functions like r_make() which always create a fresh session to do the work. However, r_make() is not a complete replacement for make(), and beginner users still run into the original problems.\nSimilar to the above, make() does not find the intended functions and global objects if it is called in a different environment. Edge cases like this one and this one continue to surprise users.\ndrake is extremely flexible about the location of the .drake/ cache. When a user calls readd(), loadd(), make(), and similar functions, drake searches up through the parent directories until it finds a .drake/ folder. This flexibility seldom helps, and it creates uncertainty and inconsistency when it comes to initializing and accessing projects, especially if there are multiple projects with nested file systems.\n\nThe targets package solves all these issues by design. Functions tar_make(), tar_make_clustermq(), and tar_make_future() all create fresh new R sessions by default. They all require a _targets.R configuration file in the project root (working directory of the tar_make() call) so that the functions, global objects, and settings are all populated in the exact same way each session, leading to less frustration, greater consistency, and greater reproducibility. In addition, the _targets/ data store always lives in the project root.\n\n\nB.3.2 Enhanced debugging support\ntargets has enhanced debugging support. With the workspaces argument to tar_option_set(), users can locally recreate the conditions under which a target runs. This includes packages, global functions and objects, and the random number generator seed. Similarly, tar_option_set(error = \"workspace\") automatically saves debugging workspaces for targets that encounter errors. The debug option lets users enter an interactive debugger for a given target while the pipeline is running. And unlike drake, all debugging features are fully compatible with dynamic branching.\n\n\nB.3.3 Improved tracking of package functions\nBy default, targets ignores changes to functions inside external packages. However, if a workflow centers on a custom package with methodology under development, users can make targets automatically watch the package’s functions for changes. Simply supply the names of the relevant packages to the imports argument of tar_option_set(). Unlike drake, targets can track multiple packages this way, and the internal mechanism is much safer.\n\n\nB.3.4 Lighter, friendlier data management\ndrake’s cache is an intricate file system in a hidden .drake folder. It contains multiple files for each target, and those names are not informative. (See the files in the data/ folder in the diagram below.) Users often have trouble understanding how drake manages data, resolving problems when files are corrupted, placing the data under version control, collaborating with others on the same pipeline, and clearing out superfluous data when the cache grows large in storage.\n.drake/\n├── config/\n├── data/\n├───── 17bfcef645301416.rds\n├───── 21935c86f12692e2.rds\n├───── 37caf5df2892cfc4.rds\n├───── ...\n├── drake/\n├───── history/\n├───── return/\n├───── tmp/\n├── keys/ # A surprisingly large number of tiny text files live here.\n├───── memoize/\n├───── meta/\n├───── objects/\n├───── progress/\n├───── recover/\n├───── session/\n└── scratch/ # This folder should be temporary, but it gets egregiously large.\nThe targets takes a friendlier, more transparent, less mysterious approach to data management. Its data store is a visible _targets folder, and it contains far fewer files: a spreadsheet of metadata, a spreadsheet of target progress, and one informatively named data file for each target. It is much easier to understand the data management process, identify and diagnose problems, place projects under version control, and avoid consuming unnecessary storage resources. Sketch:\n_targets/\n├── meta/\n├───── meta\n├───── process\n├───── progress\n├── objects/\n├───── target_name_1\n├───── target_name_2\n├───── target_name_3\n├───── ...\n├── scratch/ # tar_make() deletes this folder after it finishes.\n└── user/ # gittargets users can put custom files here for data version control.\n\n\nB.3.5 Cloud storage\nThanks to the simplified data store and simplified internals, targets can automatically upload data to the Amazon S3 bucket of your choice. Simply configure aws.s3, create a bucket, and select one of the AWS-powered storage formats. Then, targets will automatically upload the return values to the cloud.\n\n# _targets.R\ntar_option_set(resources = list(bucket = \"my-bucket-name\"))\nlist(\n  tar_target(dataset, get_large_dataset(), format = \"aws_fst_tbl\"),\n  tar_target(analysis, analyze_dataset(dataset), format = \"aws_qs\")\n)\n\nData retrieval is still super easy.\n\ntar_read(dataset)\n\n\n\nB.3.6 Show status of functions and global objects\ndrake has several utilities that inform users which targets are up to date and which need to rerun. However, those utilities are limited by how drake manages functions and other global objects. Whenever drake inspects globals, it stores their values in its cache and loses track of their previous state from the last run of the pipeline. As a result, it has trouble informing users exactly why a given target is out of date. And because the system for tracking global objects is tightly coupled with the cache, this limitation is permanent.\nIn targets, the metadata management system only updates information on global objects when the pipeline actually runs. This makes it possible to understand which specific changes to your code could have invalided your targets. In large projects with long runtimes, this feature contributes significantly to reproducibility and peace of mind.\n\n\n\nB.3.7 Dynamic branching with dplyr::group_by()\nDynamic branching was an architecturally difficult fit in drake, and it can only support one single (vctrs-based) method of slicing and aggregation for processing sub-targets. This limitation has frustrated members of the community, as discussed here and here.\ntargets, on the other hand, is more flexible regarding slicing and aggregation. When it branches over an object, it can iterate over vectors, lists, and even data frames grouped with dplyr::group_by(). To branch over chunks of a data frame, our data frame target needs to have a special tar_group column. We can create this column in our target’s return value with the tar_group() function.\n\nlibrary(dplyr)\n#&gt; \n#&gt; Attaching package: 'dplyr'\n#&gt; The following objects are masked from 'package:stats':\n#&gt; \n#&gt;     filter, lag\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\nlibrary(targets)\nlibrary(tibble)\ntibble(\n  x = seq_len(6),\n  id = rep(letters[seq_len(3)], each = 2)\n) %&gt;%\n  group_by(id) %&gt;%\n  tar_group()\n#&gt; # A tibble: 6 × 3\n#&gt;       x id    tar_group\n#&gt;   &lt;int&gt; &lt;chr&gt;     &lt;int&gt;\n#&gt; 1     1 a             1\n#&gt; 2     2 a             1\n#&gt; 3     3 b             2\n#&gt; 4     4 b             2\n#&gt; 5     5 c             3\n#&gt; 6     6 c             3\n\nOur actual target has the command above and iteration = \"group\".\n\ntar_target(\n  data,\n  tibble(\n    x = seq_len(6),\n    id = rep(letters[seq_len(3)], each = 2)\n  ) %&gt;%\n    group_by(id) %&gt;%\n    tar_group(),\n  iteration = \"group\"\n)\n\nNow, any target that maps over data is going to define one branch for each group in the data frame. The following target creates three branches when run in a pipeline: one returning 3, one returning 7, and one returning 11.\n\ntar_target(\n  sums,\n  sum(data$x),\n  pattern = map(data)\n)\n\n\n\nB.3.8 Composable dynamic branching\nBecause the design of targets is fundamentally dynamic, users can create complicated dynamic branching patterns that are never going to be possible in drake. Below, target z creates six branches, one for each combination of w and tuple (x, y). The pattern cross(w, map(x, y)) is equivalent to tidyr::crossing(w, tidyr::nesting(x, y)).\n\n# _targets.R\nlibrary(targets)\nlist(\n  tar_target(w, seq_len(2)),\n  tar_target(x, head(letters, 3)),\n  tar_target(y, head(LETTERS, 3)),\n  tar_target(\n    z,\n    data.frame(w = w, x = x, y = y),\n    pattern = cross(w, map(x, y))\n  )\n)\n\nThanks to glep and djbirke on GitHub for the idea.\n\n\nB.3.9 Improved parallel efficiency\nDynamic branching in drake is staged. In other words, all the sub-targets of a dynamic target must complete before the pipeline moves on to downstream targets. The diagram below illustrates this behavior in a pipeline with a dynamic target B that maps over another dynamic target A. For thousands of dynamic sub-targets with highly variable runtimes, this behavior consumes unnecessary runtime and computing resources. And because drake’s architecture was designed at a fundamental level for static branching only, this limitation is permanent.\n\nBy contrast, the internal data structures in targets are dynamic by design, which allows for a dynamic branching model with more flexibility and parallel efficiency. Branches can always start as soon as their upstream dependencies complete, even if some of those upstream dependencies are branches. This behavior reduces runtime and reduces consumption of computing resources.\n\n\n\nB.3.10 Metaprogramming\nIn drake, pipelines are defined with the drake_plan() function. drake_plan() supports an elaborate domain specific language that diffuses user-supplied R expressions. This makes it convenient to assign commands to targets in the vast majority of cases, but it also obstructs custom metaprogramming by users (example here). Granted, it is possible to completely circumvent drake_plan() and create the whole data frame from scratch, but this is hardly ideal and seldom done in practice.\nThe targets package tries to make customization easier. Relative to drake, targets takes a decentralized approach to setting up pipelines, moving as much custom configuration as possible to the target level rather than the whole pipeline level. In addition, the tar_target_raw() function avoids non-standard evaluation while mirroring tar_target() in all other respects. All this makes it much easier to create custom metaprogrammed pipelines and target archetypes while avoiding an elaborate domain specific language for static branching, which was extremely difficult to understand and error prone in drake. The R Targetopia is an emerging ecosystem of workflow frameworks that take full advantage of this customization and democratize reproducible pipelines."
  },
  {
    "objectID": "markdown.html#access",
    "href": "markdown.html#access",
    "title": "Appendix C — Target Markdown",
    "section": "C.1 Access",
    "text": "C.1 Access\nThis chapter’s example Target Markdown document is itself a tutorial and a simplified version of the chapter. There are two convenient ways to access the file:\n\nThe use_targets() function.\nThe RStudio R Markdown template system.\n\nFor (2), in the RStudio IDE, select a new Quarto or R Markdown document in the New File dropdown menu in the upper left-hand corner of the window.\n\nThen, select the Target Markdown template and click OK to open a copy of the report for editing."
  },
  {
    "objectID": "markdown.html#purpose",
    "href": "markdown.html#purpose",
    "title": "Appendix C — Target Markdown",
    "section": "C.2 Purpose",
    "text": "C.2 Purpose\nTarget Markdown has two primary objectives:\n\nInteractively explore, prototype, and test the components of a targets pipeline using the Quarto notebook interface or the R Markdown notebook interface.\nSet up a targets pipeline using convenient Markdown-like code chunks.\n\nTarget Markdown supports a special {targets} language engine with an interactive mode for (1) and a non-interactive mode for (2). By default, the mode is interactive in the notebook interface and non-interactive when you knit/render the whole document.2. You can set the mode using the tar_interactive chunk option."
  },
  {
    "objectID": "markdown.html#example",
    "href": "markdown.html#example",
    "title": "Appendix C — Target Markdown",
    "section": "C.3 Example",
    "text": "C.3 Example\nThe following example is based on the minimal targets project at https://github.com/wlandau/targets-minimal/. We process the base airquality dataset, fit a model, and display a histogram of ozone concentration."
  },
  {
    "objectID": "markdown.html#required-packages",
    "href": "markdown.html#required-packages",
    "title": "Appendix C — Target Markdown",
    "section": "C.4 Required packages",
    "text": "C.4 Required packages\nThis example requires several R packages, and targets must be version 0.6.0 or above.\n\n# R console\ninstall.packages(c(\"biglm\", \"dplyr\", \"ggplot2\", \"readr\", \"targets\", \"tidyr\"))"
  },
  {
    "objectID": "markdown.html#setup",
    "href": "markdown.html#setup",
    "title": "Appendix C — Target Markdown",
    "section": "C.5 Setup",
    "text": "C.5 Setup\nFirst, load targets to activate the specialized knitr engine for Target Markdown.\n```{r}\nlibrary(targets)\n```\nNon-interactive Target Markdown writes scripts to a special _targets_r/ directory to define individual targets and global objects. In order to keep your target definitions up to date, it is recommended to remove _targets_r/ at the beginning of the R Markdown document(s) in order to clear out superfluous targets and globals from a previous version. tar_unscript() is a convenient way to do this.\n```{r}\ntar_unscript()\n```"
  },
  {
    "objectID": "markdown.html#globals",
    "href": "markdown.html#globals",
    "title": "Appendix C — Target Markdown",
    "section": "C.6 Globals",
    "text": "C.6 Globals\nAs usual, your targets depend on custom functions, global objects, and tar_option_set() options you define before the pipeline begins. Define these globals using the {targets} engine with tar_globals = TRUE chunk option.\n```{targets some-globals, tar_globals = TRUE, tar_interactive = TRUE}\noptions(tidyverse.quiet = TRUE)\ntar_option_set(packages = c(\"biglm\", \"dplyr\", \"ggplot2\", \"readr\", \"tidyr\"))\ncreate_plot &lt;- function(data) {\n  ggplot(data) +\n    geom_histogram(aes(x = Ozone), bins = 12) +\n    theme_gray(24)\n}\n```\nIn interactive mode, the chunk simply runs the R code in the tar_option_get(\"envir\") environment (usually the global environment) and displays a message:\n\n#&gt; Run code and assign objects to the environment.\n\nHere is the same chunk in non-interactive mode. Normally, there is no need to duplicate chunks like this, but we do so here in order to demonstrate both modes.\n```{targets chunk-name, tar_globals = TRUE, tar_interactive = FALSE}\noptions(tidyverse.quiet = TRUE)\ntar_option_set(packages = c(\"biglm\", \"dplyr\", \"ggplot2\", \"readr\", \"tidyr\"))\ncreate_plot &lt;- function(data) {\n  ggplot(data) +\n    geom_histogram(aes(x = Ozone), bins = 12) +\n    theme_gray(24)\n}\n```\nIn non-interactive mode, the chunk establishes a common _targets.R file and writes the R code to a script in _targets_r/globals/, and displays an informative message:3\n\n#&gt; Establish _targets.R and _targets_r/globals/chunk-name.R.\n\nIt is good practice to assign explicit chunk labels or set the tar_name chunk option on a chunk-by-chunk basis. Each chunk writes code to a script path that depends on the name, and all script paths need to be unique.4"
  },
  {
    "objectID": "markdown.html#target-definitions",
    "href": "markdown.html#target-definitions",
    "title": "Appendix C — Target Markdown",
    "section": "C.7 Target definitions",
    "text": "C.7 Target definitions\nTo define targets of the pipeline, use the {targets} language engine with the tar_globals chunk option equal FALSE or NULL (default). The return value of the chunk must be a target object or a list of target objects, created by tar_target() or a similar function.\nBelow, we define a target to establish the air quality dataset in the pipeline.\n```{targets raw-data, tar_interactive = TRUE}\ntar_target(raw_data, airquality)\n```\nIf you run this chunk in interactive mode, the target’s R command runs, the engine tests if the output can be saved and loaded from disk correctly, and then the return value gets assigned to the tar_option_get(\"envir\") environment (usually the global environment).\n\n#&gt; Run targets and assign them to the environment.\n\nIn the process, some temporary files are created and destroyed, but your local file space will remain untouched (barring any custom side effects in your custom code).\nAfter you run a target in interactive mode, the return value is available in memory, and you can write an ordinary R code chunk to read it.\n```{r}\nhead(raw_data)\n```\nThe output is the same as what tar_read(raw_data) would show after a serious pipeline run.\n\nhead(raw_data)\n#&gt;   Ozone Solar.R Wind Temp Month Day\n#&gt; 1    41     190  7.4   67     5   1\n#&gt; 2    36     118  8.0   72     5   2\n#&gt; 3    12     149 12.6   74     5   3\n#&gt; 4    18     313 11.5   62     5   4\n#&gt; 5    NA      NA 14.3   56     5   5\n#&gt; 6    28      NA 14.9   66     5   6\n\nFor demonstration purposes, here is the raw_data target code chunk in non-interactive mode.\n```{targets chunk-name-with-target, tar_interactive = FALSE}\ntar_target(raw_data, airquality)\n```\nIn non-interactive mode, the {targets} engine does not actually run any targets. Instead, it establishes a common _targets.R and writes the code to a script in _targets_r/targets/.\n\n#&gt; Establish _targets.R and _targets_r/targets/chunk-name-with-target.R.\n\nNext, we define more targets to process the raw data and plot a histogram. Only the returned value of the chunk code actually becomes part of the pipeline, so if you define multiple targets in a single chunk, be sure to wrap them all in a list.\n```{targets downstream-targets}\nlist(\n  tar_target(data, raw_data %&gt;% filter(!is.na(Ozone))),\n  tar_target(hist, create_plot(data))\n)\n```\nIn non-interactive mode, the whole target list gets written to a single script.\n\n#&gt; Establish _targets.R and _targets_r/targets/downstream-targets.R.\n\nLastly, we define a target to fit a model to the data. For simple targets like this one, we can use convenient shorthand to convert the code in a chunk into a valid target. Simply set the tar_simple chunk option to TRUE.\n```{targets fit, tar_simple = TRUE}\nanalysis_data &lt;- data\nbiglm(Ozone ~ Wind + Temp, analysis_data)\n```\nWhen the chunk is preprocessed, chunk label (or the tar_name chunk option if you set it) becomes the target name, and the chunk code becomes the target command. All other arguments of tar_target() remain at their default values (configurable with tar_option_set() in a tar_globals = TRUE chunk). The output in the rendered R Markdown document reflects this preprocessing.\n\ntar_target(fit, {\n  biglm(Ozone ~ Wind + Temp, data)\n})\n#&gt; Define target fit from chunk code.\n#&gt; Establish _targets.R and _targets_r/targets/fit.R.\n\n\nC.7.1 Pipeline\nIf you ran all the {targets} chunks in non-interactive mode (i.e. pipeline construction mode), then the target script file and helper scripts should all be established, and you are ready to run the pipeline in with tar_make() in an ordinary {r} code chunk. This time, the output is written to persistent storage at the project root.\n```{r}\ntar_make()\n```\n\n#&gt; • start target raw_data\n#&gt; • built target raw_data [0.585 seconds]\n#&gt; • start target data\n#&gt; • built target data [0.009 seconds]\n#&gt; • start target fit\n#&gt; • built target fit [0.003 seconds]\n#&gt; • start target hist\n#&gt; • built target hist [0.014 seconds]\n#&gt; • end pipeline [0.765 seconds]\n\n\n\nC.7.2 Output\nYou can retrieve results from the _targets/ data store using tar_read() or tar_load().\n```{r}\nlibrary(biglm)\ntar_read(fit)\n```\n\n#&gt; Large data regression model: biglm(Ozone ~ Wind + Temp, data)\n#&gt; Sample size =  116\n\n```{r}\ntar_read(hist)\n```\n\n\n\n\n\nThe targets dependency graph helps your readers understand the steps of your pipeline at a high level.\n```{r}\ntar_visnetwork()\n```\n\n\n\n\n\n\nAt this point, you can go back and run {targets} chunks in interactive mode without interfering with the code or data of the non-interactive pipeline."
  },
  {
    "objectID": "markdown.html#conditioning-on-interactive-mode",
    "href": "markdown.html#conditioning-on-interactive-mode",
    "title": "Appendix C — Target Markdown",
    "section": "C.8 Conditioning on interactive mode",
    "text": "C.8 Conditioning on interactive mode\ntargets version 0.6.0.9001 and above supports the tar_interactive() function, which suppresses code unless Target Markdown interactive mode is turned on. Similarly, tar_noninteractive() suppresses code in interactive mode, and tar_toggle() selects alternative pieces of code based on the current mode."
  },
  {
    "objectID": "markdown.html#tar_interactive",
    "href": "markdown.html#tar_interactive",
    "title": "Appendix C — Target Markdown",
    "section": "C.9 tar_interactive()",
    "text": "C.9 tar_interactive()\ntar_interactive() is useful for dynamic branching. If a dynamic target branches over a target from a different chunk, this ordinarily breaks interactive mode.\n```{targets condition, tar_interactive = TRUE}\ntar_target(y, x ^ 2, pattern = map(x))\n```\n\n#&gt; Run targets and assign them to the environment.\n#&gt; Error:\n#&gt; ! Target y tried to branch over x, which is illegal...\n\nHowever, with tar_interactive(), you can define a version of x just for testing and prototyping in interactive mode. The chunk below fixes interactive mode without changing the pipeline in non-interactive mode.\n```{targets condition-fixed, tar_interactive = TRUE}\nlist(\n  tar_interactive(tar_target(x, seq_len(2))),\n  tar_target(y, x ^ 2, pattern = map(x))\n)\n```\n\n#&gt; Run targets and assign them to the environment."
  },
  {
    "objectID": "markdown.html#tar_toggle",
    "href": "markdown.html#tar_toggle",
    "title": "Appendix C — Target Markdown",
    "section": "C.10 tar_toggle()",
    "text": "C.10 tar_toggle()\ntar_toggle() is useful for scaling up and down the amount of work based on the current mode. Interactive mode should finish quickly for prototyping and testing, and non-interactive mode should take on the full level work required for a serious pipeline. Below, tar_toggle() seamlessly scales up and down the number of simulations repetitions in the example target from https://wlandau.github.io/rmedicine2021-pipeline/#target-definitions. To learn more about stantargets, visit https://docs.ropensci.org/stantargets/.\n```{targets bayesian-model-validation, tar_interactive = TRUE}\ntar_stan_mcmc_rep_summary(\n  name = mcmc,\n  stan_files = \"model.stan\",\n  data = simulate_data(), # Defined in another code chunk.\n  batches = tar_toggle(1, 100),\n  reps = tar_toggle(1, 10),\n  chains = tar_toggle(1, 4),\n  parallel_chains = tar_toggle(1, 4),\n  iter_warmup = tar_toggle(100, 4e4),\n  iter_sampling = tar_toggle(100, 4e4),\n  summaries = list(\n    ~posterior::quantile2(.x, probs = c(0.025, 0.25, 0.5, 0.75, 0.975)),\n    rhat = ~posterior::rhat(.x)\n  ),\n  deployment = \"worker\"\n)\n```"
  },
  {
    "objectID": "markdown.html#chunk-options",
    "href": "markdown.html#chunk-options",
    "title": "Appendix C — Target Markdown",
    "section": "C.11 Chunk options",
    "text": "C.11 Chunk options\n\ntar_globals: Logical of length 1, whether to define globals or targets. If TRUE, the chunk code defines functions, objects, and options common to all the targets. If FALSE or NULL (default), then the chunk returns formal targets for the pipeline.\ntar_interactive: Logical of length 1 to choose whether to run the chunk in interactive mode or non-interactive mode.\ntar_name: name to use for writing helper script files (e.g. _targets_r/targets/target_script.R) and specifying target names if the tar_simple chunk option is TRUE. All helper scripts and target names must have unique names, so please do not set this option globally with knitr::opts_chunk$set().\ntar_script: Character of length 1, where to write the target script file in non-interactive mode. Most users can skip this option and stick with the default _targets.R script path. Helper script files are always written next to the target script in a folder with an \"_r\" suffix. The tar_script path must either be absolute or be relative to the project root (where you call tar_make() or similar). If not specified, the target script path defaults to tar_config_get(\"script\") (default: _targets.R; helpers default: _targets_r/). When you run tar_make() etc. with a non-default target script, you must select the correct target script file either with the script argument or with tar_config_set(script = ...). The function will source() the script file from the current working directory (i.e. with chdir = FALSE in source()).\ntar_simple: Logical of length 1. Set to TRUE to define a single target with a simplified interface. In code chunks with tar_simple equal to TRUE, the chunk label (or the tar_name chunk option if you set it) becomes the name, and the chunk code becomes the command. In other words, a code chunk with label targetname and command mycommand() automatically gets converted to tar_target(name = targetname, command = mycommand()). All other arguments of tar_target() remain at their default values (configurable with tar_option_set() in a tar_globals = TRUE chunk)."
  },
  {
    "objectID": "markdown.html#footnotes",
    "href": "markdown.html#footnotes",
    "title": "Appendix C — Target Markdown",
    "section": "",
    "text": "Target Markdown is powered entirely by targets and knitr. It does not actually require Markdown, although Markdown is the recommended way to interact with it.↩︎\nIn targets version 0.6.0, the mode is interactive if interactive() is TRUE. In subsequent versions, the mode is interactive if !isTRUE(getOption(\"knitr.in.progress\")) is TRUE.↩︎\nThe _targets.R file from Target Markdown never changes from chunk to chunk or report to report, so you can spread your work over multiple reports without worrying about aligning _targets.R scripts. Just be sure all your chunk names are unique across all the reports of a project, or you set the tar_name chunk option to specify base names of script file paths.↩︎\nIn addition, for bookdown projects, chunk labels should only use alphanumeric characters and dashes.↩︎"
  }
]